
atmega164_GuessGame.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000aa  00800100  00001206  0000129a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001206  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  008001aa  008001aa  00001344  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001344  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001374  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  000013b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c71  00000000  00000000  0000145c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000908  00000000  00000000  000030cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e2f  00000000  00000000  000039d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b8  00000000  00000000  00004804  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008ec  00000000  00000000  000049bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d9a  00000000  00000000  000052a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00006042  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f2 01 	jmp	0x3e4	; 0x3e4 <__ctors_end>
       4:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
       8:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
       c:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      10:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      14:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      18:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      1c:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      20:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      24:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      28:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      2c:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      30:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      34:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      38:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      3c:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      40:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      44:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      48:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      4c:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      50:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      54:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      58:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      5c:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      60:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      64:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      68:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      6c:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      70:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      74:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      78:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>

0000007c <TXT_WORDTOGUESS>:
      7c:	ad 00 a6 00 a1 00 98 00 8f 00 88 00                 ............

00000088 <TXT_WORDTOGUESS_word_5>:
      88:	47 52 4f 55 4e 44 00                                GROUND.

0000008f <TXT_WORDTOGUESS_word_4>:
      8f:	47 52 41 50 48 49 43 53 00                          GRAPHICS.

00000098 <TXT_WORDTOGUESS_word_3>:
      98:	43 4f 4d 50 55 54 45 52 00                          COMPUTER.

000000a1 <TXT_WORDTOGUESS_word_2>:
      a1:	43 48 49 50 00                                      CHIP.

000000a6 <TXT_WORDTOGUESS_word_1>:
      a6:	53 43 52 45 45 4e 00                                SCREEN.

000000ad <TXT_WORDTOGUESS_word_0>:
      ad:	4d 49 43 52 4f 43 4f 4e 54 52 4f 4c 4c 45 52 00     MICROCONTROLLER.

000000bd <TXT_HOWTOPLAY>:
      bd:	34 02 23 02 0f 02 f9 01 e5 01 cf 01 b9 01 a7 01     4.#.............
      cd:	94 01 85 01 71 01 5f 01 51 01 3b 01 25 01 0f 01     ....q._.Q.;.%...
      dd:	fd 00 e9 00 e3 00                                   ......

000000e3 <TXT_HOWTOPLAY_line_18>:
      e3:	6c 6f 73 73 2e 00                                   loss..

000000e9 <TXT_HOWTOPLAY_line_17>:
      e9:	73 74 72 69 6b 65 20 72 65 73 75 6c 74 73 20 69     strike results i
      f9:	6e 20 61 00                                         n a.

000000fd <TXT_HOWTOPLAY_line_16>:
      fd:	61 20 73 74 72 69 6b 65 2e 20 54 68 65 20 33 72     a strike. The 3r
     10d:	64 00                                               d.

0000010f <TXT_HOWTOPLAY_line_15>:
     10f:	74 68 65 6e 20 79 6f 75 20 77 69 6c 6c 20 72 65     then you will re
     11f:	63 65 69 76 65 00                                   ceive.

00000125 <TXT_HOWTOPLAY_line_14>:
     125:	79 6f 75 20 67 75 65 73 73 20 69 6e 63 6f 72 72     you guess incorr
     135:	65 63 74 6c 79 00                                   ectly.

0000013b <TXT_HOWTOPLAY_line_13>:
     13b:	72 65 76 65 61 6c 65 64 2c 20 79 6f 75 20 77 69     revealed, you wi
     14b:	6e 2e 20 49 66 00                                   n. If.

00000151 <TXT_HOWTOPLAY_line_12>:
     151:	77 68 6f 6c 65 20 77 6f 72 64 20 69 73 00           whole word is.

0000015f <TXT_HOWTOPLAY_line_11>:
     15f:	77 6f 72 64 20 61 6e 64 20 77 68 65 6e 20 74 68     word and when th
     16f:	65 00                                               e.

00000171 <TXT_HOWTOPLAY_line_10>:
     171:	72 65 76 65 61 6c 73 20 70 61 72 74 20 6f 66 20     reveals part of 
     181:	74 68 65 00                                         the.

00000185 <TXT_HOWTOPLAY_line_9>:
     185:	45 61 63 68 20 73 65 6c 65 63 74 69 6f 6e 00        Each selection.

00000194 <TXT_HOWTOPLAY_line_8>:
     194:	6f 63 63 75 72 20 69 6e 20 74 68 65 20 77 6f 72     occur in the wor
     1a4:	64 2e 00                                            d..

000001a7 <TXT_HOWTOPLAY_line_7>:
     1a7:	74 68 65 20 6c 65 74 74 65 72 73 20 77 68 69 63     the letters whic
     1b7:	68 00                                               h.

000001b9 <TXT_HOWTOPLAY_line_6>:
     1b9:	74 68 65 20 77 6f 72 64 20 62 79 20 73 65 6c 65     the word by sele
     1c9:	63 74 69 6e 67 00                                   cting.

000001cf <TXT_HOWTOPLAY_line_5>:
     1cf:	52 75 6c 65 73 3a 20 59 6f 75 20 6d 75 73 74 20     Rules: You must 
     1df:	67 75 65 73 73 00                                   guess.

000001e5 <TXT_HOWTOPLAY_line_4>:
     1e5:	77 69 74 68 20 74 68 65 20 72 69 67 68 74 20 6b     with the right k
     1f5:	65 79 2e 00                                         ey..

000001f9 <TXT_HOWTOPLAY_line_3>:
     1f9:	63 6f 6e 66 69 72 6d 20 74 68 65 20 73 65 6c 65     confirm the sele
     209:	63 74 69 6f 6e 00                                   ction.

0000020f <TXT_HOWTOPLAY_line_2>:
     20f:	73 65 6c 65 63 74 20 61 20 6c 65 74 74 65 72 20     select a letter 
     21f:	61 6e 64 00                                         and.

00000223 <TXT_HOWTOPLAY_line_1>:
     223:	61 6e 64 20 64 6f 77 6e 20 6b 65 79 73 20 74 6f     and down keys to
	...

00000234 <TXT_HOWTOPLAY_line_0>:
     234:	43 6f 6e 74 72 6f 6c 73 3a 20 55 73 65 20 74 68     Controls: Use th
     244:	65 20 75 70 00                                      e up.

00000249 <TXT_ABOUT>:
     249:	b0 02 9b 02 86 02 73 02 60 02 55 02                 ......s.`.U.

00000255 <TXT_ABOUT_line_5>:
     255:	66 72 6f 6d 20 46 49 4c 53 2e 00                    from FILS..

00000260 <TXT_ABOUT_line_4>:
     260:	53 61 76 75 20 67 72 6f 75 70 20 31 32 34 32 20     Savu group 1242 
     270:	45 42 00                                            EB.

00000273 <TXT_ABOUT_line_3>:
     273:	62 79 20 41 6c 65 78 61 6e 64 72 75 2d 4d 69 68     by Alexandru-Mih
     283:	61 69 00                                            ai.

00000286 <TXT_ABOUT_line_2>:
     286:	73 6f 66 74 77 61 72 65 20 77 61 73 20 77 72 69     software was wri
     296:	74 74 65 6e 00                                      tten.

0000029b <TXT_ABOUT_line_1>:
     29b:	67 75 65 73 73 20 74 68 65 20 77 6f 72 64 2e 20     guess the word. 
     2ab:	54 68 69 73 00                                      This.

000002b0 <TXT_ABOUT_line_0>:
     2b0:	41 20 67 61 6d 65 20 77 68 65 72 65 20 79 6f 75     A game where you
     2c0:	20 6d 75 73 74 00                                    must.

000002c6 <FONT>:
     2c6:	00 00 00 00 2e 00 06 00 06 3e 14 3e 2c 7e 34 12     .........>.>,~4.
     2d6:	08 24 14 2a 34 00 06 00 1c 22 00 00 22 1c 0a 04     .$.*4....".."...
     2e6:	0a 08 1c 08 40 30 00 08 08 08 00 60 60 10 08 04     ....@0.....``...
     2f6:	1c 2a 1c 04 3e 00 32 2a 24 2a 2a 14 18 14 3a 2e     .*..>.2*$**...:.
     306:	2a 3a 3e 2a 3a 02 3a 06 3e 2a 3e 2e 2a 3e 00 14     *:>*:.:.>*>.*>..
     316:	00 20 14 00 08 1c 14 14 14 14 14 1c 08 02 2a 04     . ............*.
     326:	00 00 00 3c 0a 3c 3e 2a 14 1c 22 22 3e 22 1c 3e     ...<.<>*.."">".>
     336:	2a 2a 3e 0a 0a 1c 22 3a 3e 08 3e 22 3e 22 10 20     **>...":>.>">". 
     346:	1e 3e 08 36 3e 20 20 3e 0c 3e 3e 1c 3e 1c 22 1c     .>.6>  >.>>.>.".
     356:	3e 0a 04 1c 32 3c 3e 0a 34 24 2a 12 02 3e 02 3e     >...2<>.4$*..>.>
     366:	20 3e 0e 30 0e 3e 18 3e 36 08 36 06 38 06 32 2a      >.0.>.>6.6.8.2*
     376:	26 3e 22 00 04 08 10 00 22 3e 06 03 06 20 20 20     &>".....">...   
     386:	02 04 00 10 28 38 3e 28 10 30 28 28 10 28 3e 18     ....(8>(.0((.(>.
     396:	2c 2c 08 3c 0a 90 a8 78 3e 08 30 00 3a 00 40 3a     ,,.<...x>.0.:.@:
     3a6:	00 3e 10 28 00 3e 00 38 18 38 38 08 30 38 28 38     .>.(.>.8.88.08(8
     3b6:	f8 28 10 10 28 f8 38 08 08 20 38 08 04 3e 24 38     .(..(.8.. 8..>$8
     3c6:	20 38 18 30 18 38 30 38 28 10 28 98 60 18 08 38      8.0.808(.(.`..8
     3d6:	20 08 1c 22 00 7e 00 22 1c 08 08 18 10 00            ..".~."......

000003e4 <__ctors_end>:
     3e4:	11 24       	eor	r1, r1
     3e6:	1f be       	out	0x3f, r1	; 63
     3e8:	cf ef       	ldi	r28, 0xFF	; 255
     3ea:	d4 e0       	ldi	r29, 0x04	; 4
     3ec:	de bf       	out	0x3e, r29	; 62
     3ee:	cd bf       	out	0x3d, r28	; 61

000003f0 <__do_copy_data>:
     3f0:	11 e0       	ldi	r17, 0x01	; 1
     3f2:	a0 e0       	ldi	r26, 0x00	; 0
     3f4:	b1 e0       	ldi	r27, 0x01	; 1
     3f6:	e6 e0       	ldi	r30, 0x06	; 6
     3f8:	f2 e1       	ldi	r31, 0x12	; 18
     3fa:	02 c0       	rjmp	.+4      	; 0x400 <__DATA_REGION_LENGTH__>
     3fc:	05 90       	lpm	r0, Z+
     3fe:	0d 92       	st	X+, r0
     400:	aa 3a       	cpi	r26, 0xAA	; 170
     402:	b1 07       	cpc	r27, r17
     404:	d9 f7       	brne	.-10     	; 0x3fc <__do_copy_data+0xc>

00000406 <__do_clear_bss>:
     406:	21 e0       	ldi	r18, 0x01	; 1
     408:	aa ea       	ldi	r26, 0xAA	; 170
     40a:	b1 e0       	ldi	r27, 0x01	; 1
     40c:	01 c0       	rjmp	.+2      	; 0x410 <.do_clear_bss_start>

0000040e <.do_clear_bss_loop>:
     40e:	1d 92       	st	X+, r1

00000410 <.do_clear_bss_start>:
     410:	ab 3a       	cpi	r26, 0xAB	; 171
     412:	b2 07       	cpc	r27, r18
     414:	e1 f7       	brne	.-8      	; 0x40e <.do_clear_bss_loop>
     416:	0e 94 c2 04 	call	0x984	; 0x984 <main>
     41a:	0c 94 01 09 	jmp	0x1202	; 0x1202 <_exit>

0000041e <__bad_interrupt>:
     41e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000422 <High>:
void TimeoutSInterrupt(unsigned char seconds)
{
    time = seconds * 77;    // Calculated that 77 counts of overflow is aprox 1 second (CHECK AT TOP)
    timerSEnabled = true;
    counter = 0;
    TCNT0 = 0x00;
     422:	61 34       	cpi	r22, 0x41	; 65
     424:	11 f0       	breq	.+4      	; 0x42a <High+0x8>
     426:	61 36       	cpi	r22, 0x61	; 97
     428:	69 f4       	brne	.+26     	; 0x444 <High+0x22>
     42a:	42 b1       	in	r20, 0x02	; 2
     42c:	21 e0       	ldi	r18, 0x01	; 1
     42e:	30 e0       	ldi	r19, 0x00	; 0
     430:	b9 01       	movw	r22, r18
     432:	02 c0       	rjmp	.+4      	; 0x438 <High+0x16>
     434:	66 0f       	add	r22, r22
     436:	77 1f       	adc	r23, r23
     438:	8a 95       	dec	r24
     43a:	e2 f7       	brpl	.-8      	; 0x434 <High+0x12>
     43c:	cb 01       	movw	r24, r22
     43e:	84 2b       	or	r24, r20
     440:	82 b9       	out	0x02, r24	; 2
     442:	08 95       	ret
     444:	62 34       	cpi	r22, 0x42	; 66
     446:	11 f0       	breq	.+4      	; 0x44c <High+0x2a>
     448:	62 36       	cpi	r22, 0x62	; 98
     44a:	69 f4       	brne	.+26     	; 0x466 <High+0x44>
     44c:	45 b1       	in	r20, 0x05	; 5
     44e:	21 e0       	ldi	r18, 0x01	; 1
     450:	30 e0       	ldi	r19, 0x00	; 0
     452:	b9 01       	movw	r22, r18
     454:	02 c0       	rjmp	.+4      	; 0x45a <High+0x38>
     456:	66 0f       	add	r22, r22
     458:	77 1f       	adc	r23, r23
     45a:	8a 95       	dec	r24
     45c:	e2 f7       	brpl	.-8      	; 0x456 <High+0x34>
     45e:	cb 01       	movw	r24, r22
     460:	84 2b       	or	r24, r20
     462:	85 b9       	out	0x05, r24	; 5
     464:	08 95       	ret
     466:	63 34       	cpi	r22, 0x43	; 67
     468:	11 f0       	breq	.+4      	; 0x46e <High+0x4c>
     46a:	63 36       	cpi	r22, 0x63	; 99
     46c:	69 f4       	brne	.+26     	; 0x488 <High+0x66>
     46e:	48 b1       	in	r20, 0x08	; 8
     470:	21 e0       	ldi	r18, 0x01	; 1
     472:	30 e0       	ldi	r19, 0x00	; 0
     474:	b9 01       	movw	r22, r18
     476:	02 c0       	rjmp	.+4      	; 0x47c <High+0x5a>
     478:	66 0f       	add	r22, r22
     47a:	77 1f       	adc	r23, r23
     47c:	8a 95       	dec	r24
     47e:	e2 f7       	brpl	.-8      	; 0x478 <High+0x56>
     480:	cb 01       	movw	r24, r22
     482:	84 2b       	or	r24, r20
     484:	88 b9       	out	0x08, r24	; 8
     486:	08 95       	ret
     488:	64 34       	cpi	r22, 0x44	; 68
     48a:	11 f0       	breq	.+4      	; 0x490 <High+0x6e>
     48c:	64 36       	cpi	r22, 0x64	; 100
     48e:	61 f4       	brne	.+24     	; 0x4a8 <High+0x86>
     490:	4b b1       	in	r20, 0x0b	; 11
     492:	21 e0       	ldi	r18, 0x01	; 1
     494:	30 e0       	ldi	r19, 0x00	; 0
     496:	b9 01       	movw	r22, r18
     498:	02 c0       	rjmp	.+4      	; 0x49e <High+0x7c>
     49a:	66 0f       	add	r22, r22
     49c:	77 1f       	adc	r23, r23
     49e:	8a 95       	dec	r24
     4a0:	e2 f7       	brpl	.-8      	; 0x49a <High+0x78>
     4a2:	cb 01       	movw	r24, r22
     4a4:	84 2b       	or	r24, r20
     4a6:	8b b9       	out	0x0b, r24	; 11
     4a8:	08 95       	ret

000004aa <Read>:
     4aa:	61 34       	cpi	r22, 0x41	; 65
     4ac:	11 f0       	breq	.+4      	; 0x4b2 <Read+0x8>
     4ae:	61 36       	cpi	r22, 0x61	; 97
     4b0:	e1 f4       	brne	.+56     	; 0x4ea <Read+0x40>
     4b2:	90 b1       	in	r25, 0x00	; 0
     4b4:	21 e0       	ldi	r18, 0x01	; 1
     4b6:	30 e0       	ldi	r19, 0x00	; 0
     4b8:	a9 01       	movw	r20, r18
     4ba:	08 2e       	mov	r0, r24
     4bc:	02 c0       	rjmp	.+4      	; 0x4c2 <Read+0x18>
     4be:	44 0f       	add	r20, r20
     4c0:	55 1f       	adc	r21, r21
     4c2:	0a 94       	dec	r0
     4c4:	e2 f7       	brpl	.-8      	; 0x4be <Read+0x14>
     4c6:	29 2f       	mov	r18, r25
     4c8:	30 e0       	ldi	r19, 0x00	; 0
     4ca:	24 23       	and	r18, r20
     4cc:	35 23       	and	r19, r21
     4ce:	a9 01       	movw	r20, r18
     4d0:	02 c0       	rjmp	.+4      	; 0x4d6 <Read+0x2c>
     4d2:	55 95       	asr	r21
     4d4:	47 95       	ror	r20
     4d6:	8a 95       	dec	r24
     4d8:	e2 f7       	brpl	.-8      	; 0x4d2 <Read+0x28>
     4da:	ca 01       	movw	r24, r20
     4dc:	21 e0       	ldi	r18, 0x01	; 1
     4de:	89 2b       	or	r24, r25
     4e0:	09 f0       	breq	.+2      	; 0x4e4 <Read+0x3a>
     4e2:	20 e0       	ldi	r18, 0x00	; 0
     4e4:	20 93 aa 01 	sts	0x01AA, r18	; 0x8001aa <__data_end>
     4e8:	62 c0       	rjmp	.+196    	; 0x5ae <__stack+0xaf>
     4ea:	62 34       	cpi	r22, 0x42	; 66
     4ec:	11 f0       	breq	.+4      	; 0x4f2 <Read+0x48>
     4ee:	62 36       	cpi	r22, 0x62	; 98
     4f0:	e1 f4       	brne	.+56     	; 0x52a <__stack+0x2b>
     4f2:	93 b1       	in	r25, 0x03	; 3
     4f4:	21 e0       	ldi	r18, 0x01	; 1
     4f6:	30 e0       	ldi	r19, 0x00	; 0
     4f8:	a9 01       	movw	r20, r18
     4fa:	08 2e       	mov	r0, r24
     4fc:	02 c0       	rjmp	.+4      	; 0x502 <__stack+0x3>
     4fe:	44 0f       	add	r20, r20
     500:	55 1f       	adc	r21, r21
     502:	0a 94       	dec	r0
     504:	e2 f7       	brpl	.-8      	; 0x4fe <Read+0x54>
     506:	29 2f       	mov	r18, r25
     508:	30 e0       	ldi	r19, 0x00	; 0
     50a:	24 23       	and	r18, r20
     50c:	35 23       	and	r19, r21
     50e:	a9 01       	movw	r20, r18
     510:	02 c0       	rjmp	.+4      	; 0x516 <__stack+0x17>
     512:	55 95       	asr	r21
     514:	47 95       	ror	r20
     516:	8a 95       	dec	r24
     518:	e2 f7       	brpl	.-8      	; 0x512 <__stack+0x13>
     51a:	ca 01       	movw	r24, r20
     51c:	21 e0       	ldi	r18, 0x01	; 1
     51e:	89 2b       	or	r24, r25
     520:	09 f0       	breq	.+2      	; 0x524 <__stack+0x25>
     522:	20 e0       	ldi	r18, 0x00	; 0
     524:	20 93 aa 01 	sts	0x01AA, r18	; 0x8001aa <__data_end>
     528:	42 c0       	rjmp	.+132    	; 0x5ae <__stack+0xaf>
     52a:	63 34       	cpi	r22, 0x43	; 67
     52c:	11 f0       	breq	.+4      	; 0x532 <__stack+0x33>
     52e:	63 36       	cpi	r22, 0x63	; 99
     530:	e1 f4       	brne	.+56     	; 0x56a <__stack+0x6b>
     532:	96 b1       	in	r25, 0x06	; 6
     534:	21 e0       	ldi	r18, 0x01	; 1
     536:	30 e0       	ldi	r19, 0x00	; 0
     538:	a9 01       	movw	r20, r18
     53a:	08 2e       	mov	r0, r24
     53c:	02 c0       	rjmp	.+4      	; 0x542 <__stack+0x43>
     53e:	44 0f       	add	r20, r20
     540:	55 1f       	adc	r21, r21
     542:	0a 94       	dec	r0
     544:	e2 f7       	brpl	.-8      	; 0x53e <__stack+0x3f>
     546:	29 2f       	mov	r18, r25
     548:	30 e0       	ldi	r19, 0x00	; 0
     54a:	24 23       	and	r18, r20
     54c:	35 23       	and	r19, r21
     54e:	a9 01       	movw	r20, r18
     550:	02 c0       	rjmp	.+4      	; 0x556 <__stack+0x57>
     552:	55 95       	asr	r21
     554:	47 95       	ror	r20
     556:	8a 95       	dec	r24
     558:	e2 f7       	brpl	.-8      	; 0x552 <__stack+0x53>
     55a:	ca 01       	movw	r24, r20
     55c:	21 e0       	ldi	r18, 0x01	; 1
     55e:	89 2b       	or	r24, r25
     560:	09 f0       	breq	.+2      	; 0x564 <__stack+0x65>
     562:	20 e0       	ldi	r18, 0x00	; 0
     564:	20 93 aa 01 	sts	0x01AA, r18	; 0x8001aa <__data_end>
     568:	22 c0       	rjmp	.+68     	; 0x5ae <__stack+0xaf>
     56a:	64 34       	cpi	r22, 0x44	; 68
     56c:	11 f0       	breq	.+4      	; 0x572 <__stack+0x73>
     56e:	64 36       	cpi	r22, 0x64	; 100
     570:	e1 f4       	brne	.+56     	; 0x5aa <__stack+0xab>
     572:	99 b1       	in	r25, 0x09	; 9
     574:	21 e0       	ldi	r18, 0x01	; 1
     576:	30 e0       	ldi	r19, 0x00	; 0
     578:	a9 01       	movw	r20, r18
     57a:	08 2e       	mov	r0, r24
     57c:	02 c0       	rjmp	.+4      	; 0x582 <__stack+0x83>
     57e:	44 0f       	add	r20, r20
     580:	55 1f       	adc	r21, r21
     582:	0a 94       	dec	r0
     584:	e2 f7       	brpl	.-8      	; 0x57e <__stack+0x7f>
     586:	29 2f       	mov	r18, r25
     588:	30 e0       	ldi	r19, 0x00	; 0
     58a:	24 23       	and	r18, r20
     58c:	35 23       	and	r19, r21
     58e:	a9 01       	movw	r20, r18
     590:	02 c0       	rjmp	.+4      	; 0x596 <__stack+0x97>
     592:	55 95       	asr	r21
     594:	47 95       	ror	r20
     596:	8a 95       	dec	r24
     598:	e2 f7       	brpl	.-8      	; 0x592 <__stack+0x93>
     59a:	ca 01       	movw	r24, r20
     59c:	21 e0       	ldi	r18, 0x01	; 1
     59e:	89 2b       	or	r24, r25
     5a0:	09 f0       	breq	.+2      	; 0x5a4 <__stack+0xa5>
     5a2:	20 e0       	ldi	r18, 0x00	; 0
     5a4:	20 93 aa 01 	sts	0x01AA, r18	; 0x8001aa <__data_end>
     5a8:	02 c0       	rjmp	.+4      	; 0x5ae <__stack+0xaf>
     5aa:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <__data_end>
     5ae:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <__data_end>
     5b2:	08 95       	ret

000005b4 <spiWrite>:
     5b4:	ac 01       	movw	r20, r24
     5b6:	20 e0       	ldi	r18, 0x00	; 0
     5b8:	12 c0       	rjmp	.+36     	; 0x5de <spiWrite+0x2a>
     5ba:	47 ff       	sbrs	r20, 7
     5bc:	04 c0       	rjmp	.+8      	; 0x5c6 <spiWrite+0x12>
     5be:	85 b1       	in	r24, 0x05	; 5
     5c0:	80 62       	ori	r24, 0x20	; 32
     5c2:	85 b9       	out	0x05, r24	; 5
     5c4:	03 c0       	rjmp	.+6      	; 0x5cc <spiWrite+0x18>
     5c6:	85 b1       	in	r24, 0x05	; 5
     5c8:	8f 7d       	andi	r24, 0xDF	; 223
     5ca:	85 b9       	out	0x05, r24	; 5
     5cc:	95 b1       	in	r25, 0x05	; 5
     5ce:	90 68       	ori	r25, 0x80	; 128
     5d0:	95 b9       	out	0x05, r25	; 5
     5d2:	95 b1       	in	r25, 0x05	; 5
     5d4:	9f 77       	andi	r25, 0x7F	; 127
     5d6:	95 b9       	out	0x05, r25	; 5
     5d8:	44 0f       	add	r20, r20
     5da:	55 1f       	adc	r21, r21
     5dc:	2f 5f       	subi	r18, 0xFF	; 255
     5de:	28 30       	cpi	r18, 0x08	; 8
     5e0:	60 f3       	brcs	.-40     	; 0x5ba <spiWrite+0x6>
     5e2:	08 95       	ret

000005e4 <DisplayData>:
     5e4:	95 b1       	in	r25, 0x05	; 5
     5e6:	90 64       	ori	r25, 0x40	; 64
     5e8:	95 b9       	out	0x05, r25	; 5
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	0e 94 da 02 	call	0x5b4	; 0x5b4 <spiWrite>
     5f0:	08 95       	ret

000005f2 <DisplayCMD>:
     5f2:	95 b1       	in	r25, 0x05	; 5
     5f4:	9f 7b       	andi	r25, 0xBF	; 191
     5f6:	95 b9       	out	0x05, r25	; 5
     5f8:	90 e0       	ldi	r25, 0x00	; 0
     5fa:	0e 94 da 02 	call	0x5b4	; 0x5b4 <spiWrite>
     5fe:	08 95       	ret

00000600 <DisplayClear>:
     600:	cf 93       	push	r28
     602:	df 93       	push	r29
     604:	80 e8       	ldi	r24, 0x80	; 128
     606:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <DisplayCMD>
     60a:	80 e4       	ldi	r24, 0x40	; 64
     60c:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <DisplayCMD>
     610:	c0 e0       	ldi	r28, 0x00	; 0
     612:	d0 e0       	ldi	r29, 0x00	; 0
     614:	04 c0       	rjmp	.+8      	; 0x61e <DisplayClear+0x1e>
     616:	80 e0       	ldi	r24, 0x00	; 0
     618:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <DisplayData>
     61c:	21 96       	adiw	r28, 0x01	; 1
     61e:	c8 3f       	cpi	r28, 0xF8	; 248
     620:	81 e0       	ldi	r24, 0x01	; 1
     622:	d8 07       	cpc	r29, r24
     624:	c0 f3       	brcs	.-16     	; 0x616 <DisplayClear+0x16>
     626:	df 91       	pop	r29
     628:	cf 91       	pop	r28
     62a:	08 95       	ret

0000062c <DisplayInit>:
     62c:	85 b1       	in	r24, 0x05	; 5
     62e:	8f 70       	andi	r24, 0x0F	; 15
     630:	85 b9       	out	0x05, r24	; 5
     632:	84 b1       	in	r24, 0x04	; 4
     634:	80 6f       	ori	r24, 0xF0	; 240
     636:	84 b9       	out	0x04, r24	; 4
     638:	87 e8       	ldi	r24, 0x87	; 135
     63a:	93 e1       	ldi	r25, 0x13	; 19
     63c:	01 97       	sbiw	r24, 0x01	; 1
     63e:	f1 f7       	brne	.-4      	; 0x63c <DisplayInit+0x10>
     640:	00 c0       	rjmp	.+0      	; 0x642 <DisplayInit+0x16>
     642:	00 00       	nop
     644:	85 b1       	in	r24, 0x05	; 5
     646:	80 61       	ori	r24, 0x10	; 16
     648:	85 b9       	out	0x05, r24	; 5
     64a:	81 e2       	ldi	r24, 0x21	; 33
     64c:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <DisplayCMD>
     650:	81 ea       	ldi	r24, 0xA1	; 161
     652:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <DisplayCMD>
     656:	84 e0       	ldi	r24, 0x04	; 4
     658:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <DisplayCMD>
     65c:	84 e1       	ldi	r24, 0x14	; 20
     65e:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <DisplayCMD>
     662:	80 e2       	ldi	r24, 0x20	; 32
     664:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <DisplayCMD>
     668:	8c e0       	ldi	r24, 0x0C	; 12
     66a:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <DisplayCMD>
     66e:	08 95       	ret

00000670 <DisplayPrintChar>:
     670:	0f 93       	push	r16
     672:	1f 93       	push	r17
     674:	cf 93       	push	r28
     676:	df 93       	push	r29
     678:	08 2f       	mov	r16, r24
     67a:	16 2f       	mov	r17, r22
     67c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <colIndex>
     680:	88 23       	and	r24, r24
     682:	21 f0       	breq	.+8      	; 0x68c <DisplayPrintChar+0x1c>
     684:	86 2f       	mov	r24, r22
     686:	88 0f       	add	r24, r24
     688:	88 0f       	add	r24, r24
     68a:	18 0f       	add	r17, r24
     68c:	40 34       	cpi	r20, 0x40	; 64
     68e:	29 f0       	breq	.+10     	; 0x69a <DisplayPrintChar+0x2a>
     690:	80 ee       	ldi	r24, 0xE0	; 224
     692:	84 0f       	add	r24, r20
     694:	8f 35       	cpi	r24, 0x5F	; 95
     696:	18 f4       	brcc	.+6      	; 0x69e <DisplayPrintChar+0x2e>
     698:	03 c0       	rjmp	.+6      	; 0x6a0 <DisplayPrintChar+0x30>
     69a:	4a e2       	ldi	r20, 0x2A	; 42
     69c:	01 c0       	rjmp	.+2      	; 0x6a0 <DisplayPrintChar+0x30>
     69e:	4a e2       	ldi	r20, 0x2A	; 42
     6a0:	15 35       	cpi	r17, 0x55	; 85
     6a2:	90 f5       	brcc	.+100    	; 0x708 <DisplayPrintChar+0x98>
     6a4:	07 30       	cpi	r16, 0x07	; 7
     6a6:	80 f5       	brcc	.+96     	; 0x708 <DisplayPrintChar+0x98>
     6a8:	50 e0       	ldi	r21, 0x00	; 0
     6aa:	40 52       	subi	r20, 0x20	; 32
     6ac:	51 09       	sbc	r21, r1
     6ae:	ea 01       	movw	r28, r20
     6b0:	cc 0f       	add	r28, r28
     6b2:	dd 1f       	adc	r29, r29
     6b4:	c4 0f       	add	r28, r20
     6b6:	d5 1f       	adc	r29, r21
     6b8:	ca 53       	subi	r28, 0x3A	; 58
     6ba:	dd 4f       	sbci	r29, 0xFD	; 253
     6bc:	81 2f       	mov	r24, r17
     6be:	80 68       	ori	r24, 0x80	; 128
     6c0:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <DisplayCMD>
     6c4:	8b ea       	ldi	r24, 0xAB	; 171
     6c6:	08 9f       	mul	r16, r24
     6c8:	81 2d       	mov	r24, r1
     6ca:	11 24       	eor	r1, r1
     6cc:	86 95       	lsr	r24
     6ce:	86 95       	lsr	r24
     6d0:	98 2f       	mov	r25, r24
     6d2:	99 0f       	add	r25, r25
     6d4:	89 0f       	add	r24, r25
     6d6:	98 2f       	mov	r25, r24
     6d8:	99 0f       	add	r25, r25
     6da:	80 2f       	mov	r24, r16
     6dc:	89 1b       	sub	r24, r25
     6de:	80 64       	ori	r24, 0x40	; 64
     6e0:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <DisplayCMD>
     6e4:	00 e0       	ldi	r16, 0x00	; 0
     6e6:	07 c0       	rjmp	.+14     	; 0x6f6 <DisplayPrintChar+0x86>
     6e8:	fe 01       	movw	r30, r28
     6ea:	84 91       	lpm	r24, Z
     6ec:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <DisplayData>
     6f0:	0f 5f       	subi	r16, 0xFF	; 255
     6f2:	1f 5f       	subi	r17, 0xFF	; 255
     6f4:	21 96       	adiw	r28, 0x01	; 1
     6f6:	03 30       	cpi	r16, 0x03	; 3
     6f8:	10 f4       	brcc	.+4      	; 0x6fe <DisplayPrintChar+0x8e>
     6fa:	14 35       	cpi	r17, 0x54	; 84
     6fc:	a8 f3       	brcs	.-22     	; 0x6e8 <DisplayPrintChar+0x78>
     6fe:	14 35       	cpi	r17, 0x54	; 84
     700:	18 f4       	brcc	.+6      	; 0x708 <DisplayPrintChar+0x98>
     702:	80 e0       	ldi	r24, 0x00	; 0
     704:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <DisplayData>
     708:	df 91       	pop	r29
     70a:	cf 91       	pop	r28
     70c:	1f 91       	pop	r17
     70e:	0f 91       	pop	r16
     710:	08 95       	ret

00000712 <DisplayPrintLine>:
     712:	0f 93       	push	r16
     714:	1f 93       	push	r17
     716:	cf 93       	push	r28
     718:	df 93       	push	r29
     71a:	d8 2f       	mov	r29, r24
     71c:	8a 01       	movw	r16, r20
     71e:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <colIndex>
     722:	c6 2f       	mov	r28, r22
     724:	cc 0f       	add	r28, r28
     726:	cc 0f       	add	r28, r28
     728:	c6 0f       	add	r28, r22
     72a:	07 c0       	rjmp	.+14     	; 0x73a <DisplayPrintLine+0x28>
     72c:	6c 2f       	mov	r22, r28
     72e:	8d 2f       	mov	r24, r29
     730:	0e 94 38 03 	call	0x670	; 0x670 <DisplayPrintChar>
     734:	cc 5f       	subi	r28, 0xFC	; 252
     736:	0f 5f       	subi	r16, 0xFF	; 255
     738:	1f 4f       	sbci	r17, 0xFF	; 255
     73a:	f8 01       	movw	r30, r16
     73c:	40 81       	ld	r20, Z
     73e:	44 23       	and	r20, r20
     740:	11 f0       	breq	.+4      	; 0x746 <DisplayPrintLine+0x34>
     742:	c4 35       	cpi	r28, 0x54	; 84
     744:	98 f3       	brcs	.-26     	; 0x72c <DisplayPrintLine+0x1a>
     746:	81 e0       	ldi	r24, 0x01	; 1
     748:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <colIndex>
     74c:	df 91       	pop	r29
     74e:	cf 91       	pop	r28
     750:	1f 91       	pop	r17
     752:	0f 91       	pop	r16
     754:	08 95       	ret

00000756 <initInput>:
}
*/

void initInput()
{
	DDRD &= ~(1 << P_UP);
     756:	8a b1       	in	r24, 0x0a	; 10
     758:	8e 7f       	andi	r24, 0xFE	; 254
     75a:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1 << P_RGT);
     75c:	8a b1       	in	r24, 0x0a	; 10
     75e:	8d 7f       	andi	r24, 0xFD	; 253
     760:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1 << P_LFT);
     762:	8a b1       	in	r24, 0x0a	; 10
     764:	8b 7f       	andi	r24, 0xFB	; 251
     766:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1 << P_DWN);
     768:	8a b1       	in	r24, 0x0a	; 10
     76a:	87 7f       	andi	r24, 0xF7	; 247
     76c:	8a b9       	out	0x0a, r24	; 10
	High(P_UP, 'D');
     76e:	64 e4       	ldi	r22, 0x44	; 68
     770:	80 e0       	ldi	r24, 0x00	; 0
     772:	0e 94 11 02 	call	0x422	; 0x422 <High>
	High(P_RGT, 'D');
     776:	64 e4       	ldi	r22, 0x44	; 68
     778:	81 e0       	ldi	r24, 0x01	; 1
     77a:	0e 94 11 02 	call	0x422	; 0x422 <High>
	High(P_LFT, 'D');
     77e:	64 e4       	ldi	r22, 0x44	; 68
     780:	82 e0       	ldi	r24, 0x02	; 2
     782:	0e 94 11 02 	call	0x422	; 0x422 <High>
	High(P_DWN, 'D');
     786:	64 e4       	ldi	r22, 0x44	; 68
     788:	83 e0       	ldi	r24, 0x03	; 3
     78a:	0e 94 11 02 	call	0x422	; 0x422 <High>
     78e:	08 95       	ret

00000790 <HandleInput>:
}

void HandleInput(unsigned char *indexPg, bool *update, unsigned char *selection, unsigned char *scrollIndex, unsigned char *scrollLength, bool *confirmSelect)
{
     790:	8f 92       	push	r8
     792:	9f 92       	push	r9
     794:	af 92       	push	r10
     796:	bf 92       	push	r11
     798:	cf 92       	push	r12
     79a:	df 92       	push	r13
     79c:	ef 92       	push	r14
     79e:	ff 92       	push	r15
     7a0:	0f 93       	push	r16
     7a2:	1f 93       	push	r17
     7a4:	cf 93       	push	r28
     7a6:	df 93       	push	r29
     7a8:	ec 01       	movw	r28, r24
     7aa:	5b 01       	movw	r10, r22
     7ac:	6a 01       	movw	r12, r20
     7ae:	49 01       	movw	r8, r18
	if(Read(P_RGT, 'D'))
     7b0:	64 e4       	ldi	r22, 0x44	; 68
     7b2:	81 e0       	ldi	r24, 0x01	; 1
     7b4:	0e 94 55 02 	call	0x4aa	; 0x4aa <Read>
     7b8:	88 23       	and	r24, r24
     7ba:	11 f1       	breq	.+68     	; 0x800 <HandleInput+0x70>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7bc:	8b e4       	ldi	r24, 0x4B	; 75
     7be:	9d e1       	ldi	r25, 0x1D	; 29
     7c0:	01 97       	sbiw	r24, 0x01	; 1
     7c2:	f1 f7       	brne	.-4      	; 0x7c0 <HandleInput+0x30>
     7c4:	00 c0       	rjmp	.+0      	; 0x7c6 <HandleInput+0x36>
     7c6:	00 00       	nop
	{
		_delay_ms(30);
		if(Read(P_RGT, 'D'))
     7c8:	64 e4       	ldi	r22, 0x44	; 68
     7ca:	81 e0       	ldi	r24, 0x01	; 1
     7cc:	0e 94 55 02 	call	0x4aa	; 0x4aa <Read>
     7d0:	88 23       	and	r24, r24
     7d2:	09 f4       	brne	.+2      	; 0x7d6 <HandleInput+0x46>
     7d4:	ca c0       	rjmp	.+404    	; 0x96a <HandleInput+0x1da>
		{
			if(*indexPg < 1)
     7d6:	88 81       	ld	r24, Y
     7d8:	81 11       	cpse	r24, r1
     7da:	05 c0       	rjmp	.+10     	; 0x7e6 <HandleInput+0x56>
			{
				(*indexPg)++;
     7dc:	8f 5f       	subi	r24, 0xFF	; 255
     7de:	88 83       	st	Y, r24
				*update = true;
     7e0:	f5 01       	movw	r30, r10
     7e2:	80 83       	st	Z, r24
     7e4:	c2 c0       	rjmp	.+388    	; 0x96a <HandleInput+0x1da>
			}
			else if((*indexPg == 1) && (*selection == 0))
     7e6:	81 30       	cpi	r24, 0x01	; 1
     7e8:	09 f0       	breq	.+2      	; 0x7ec <HandleInput+0x5c>
     7ea:	bf c0       	rjmp	.+382    	; 0x96a <HandleInput+0x1da>
     7ec:	f6 01       	movw	r30, r12
     7ee:	80 81       	ld	r24, Z
     7f0:	81 11       	cpse	r24, r1
     7f2:	bb c0       	rjmp	.+374    	; 0x96a <HandleInput+0x1da>
			{
				*confirmSelect = true;
     7f4:	81 e0       	ldi	r24, 0x01	; 1
     7f6:	f7 01       	movw	r30, r14
     7f8:	80 83       	st	Z, r24
				*update = true;
     7fa:	f5 01       	movw	r30, r10
     7fc:	80 83       	st	Z, r24
     7fe:	b5 c0       	rjmp	.+362    	; 0x96a <HandleInput+0x1da>
			}	
		}
	}
	else if(Read(P_DWN, 'D'))
     800:	64 e4       	ldi	r22, 0x44	; 68
     802:	83 e0       	ldi	r24, 0x03	; 3
     804:	0e 94 55 02 	call	0x4aa	; 0x4aa <Read>
     808:	88 23       	and	r24, r24
     80a:	09 f4       	brne	.+2      	; 0x80e <HandleInput+0x7e>
     80c:	48 c0       	rjmp	.+144    	; 0x89e <HandleInput+0x10e>
     80e:	8b e4       	ldi	r24, 0x4B	; 75
     810:	9d e1       	ldi	r25, 0x1D	; 29
     812:	01 97       	sbiw	r24, 0x01	; 1
     814:	f1 f7       	brne	.-4      	; 0x812 <HandleInput+0x82>
     816:	00 c0       	rjmp	.+0      	; 0x818 <HandleInput+0x88>
     818:	00 00       	nop
	{
		_delay_ms(30);
		if(Read(P_DWN, 'D'))
     81a:	64 e4       	ldi	r22, 0x44	; 68
     81c:	83 e0       	ldi	r24, 0x03	; 3
     81e:	0e 94 55 02 	call	0x4aa	; 0x4aa <Read>
     822:	88 23       	and	r24, r24
     824:	09 f4       	brne	.+2      	; 0x828 <HandleInput+0x98>
     826:	a1 c0       	rjmp	.+322    	; 0x96a <HandleInput+0x1da>
		{
			if((*indexPg == 0) && (*selection < 2))
     828:	88 81       	ld	r24, Y
     82a:	81 11       	cpse	r24, r1
     82c:	0a c0       	rjmp	.+20     	; 0x842 <HandleInput+0xb2>
     82e:	f6 01       	movw	r30, r12
     830:	90 81       	ld	r25, Z
     832:	92 30       	cpi	r25, 0x02	; 2
     834:	30 f4       	brcc	.+12     	; 0x842 <HandleInput+0xb2>
			{
				(*selection)++;
     836:	9f 5f       	subi	r25, 0xFF	; 255
     838:	90 83       	st	Z, r25
				*update = true;
     83a:	81 e0       	ldi	r24, 0x01	; 1
     83c:	f5 01       	movw	r30, r10
     83e:	80 83       	st	Z, r24
     840:	94 c0       	rjmp	.+296    	; 0x96a <HandleInput+0x1da>
			}
			else if((*indexPg == 1) && (*selection == 0) && (*scrollIndex < *scrollLength))
     842:	81 30       	cpi	r24, 0x01	; 1
     844:	81 f4       	brne	.+32     	; 0x866 <HandleInput+0xd6>
     846:	f6 01       	movw	r30, r12
     848:	90 81       	ld	r25, Z
     84a:	91 11       	cpse	r25, r1
     84c:	0c c0       	rjmp	.+24     	; 0x866 <HandleInput+0xd6>
     84e:	f4 01       	movw	r30, r8
     850:	90 81       	ld	r25, Z
     852:	f8 01       	movw	r30, r16
     854:	20 81       	ld	r18, Z
     856:	92 17       	cp	r25, r18
     858:	30 f4       	brcc	.+12     	; 0x866 <HandleInput+0xd6>
			{
				(*scrollIndex)++;
     85a:	9f 5f       	subi	r25, 0xFF	; 255
     85c:	f4 01       	movw	r30, r8
     85e:	90 83       	st	Z, r25
				*update = true;
     860:	f5 01       	movw	r30, r10
     862:	80 83       	st	Z, r24
     864:	82 c0       	rjmp	.+260    	; 0x96a <HandleInput+0x1da>
			}
			else if((*indexPg == 1) && (*selection > 0) && ((*scrollIndex) + 5) < ((*scrollLength)))
     866:	81 30       	cpi	r24, 0x01	; 1
     868:	09 f0       	breq	.+2      	; 0x86c <HandleInput+0xdc>
     86a:	7f c0       	rjmp	.+254    	; 0x96a <HandleInput+0x1da>
     86c:	f6 01       	movw	r30, r12
     86e:	80 81       	ld	r24, Z
     870:	88 23       	and	r24, r24
     872:	09 f4       	brne	.+2      	; 0x876 <HandleInput+0xe6>
     874:	7a c0       	rjmp	.+244    	; 0x96a <HandleInput+0x1da>
     876:	f4 01       	movw	r30, r8
     878:	40 81       	ld	r20, Z
     87a:	24 2f       	mov	r18, r20
     87c:	30 e0       	ldi	r19, 0x00	; 0
     87e:	2b 5f       	subi	r18, 0xFB	; 251
     880:	3f 4f       	sbci	r19, 0xFF	; 255
     882:	f8 01       	movw	r30, r16
     884:	80 81       	ld	r24, Z
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	28 17       	cp	r18, r24
     88a:	39 07       	cpc	r19, r25
     88c:	0c f0       	brlt	.+2      	; 0x890 <HandleInput+0x100>
     88e:	6d c0       	rjmp	.+218    	; 0x96a <HandleInput+0x1da>
			{
				(*scrollIndex)++;
     890:	4f 5f       	subi	r20, 0xFF	; 255
     892:	f4 01       	movw	r30, r8
     894:	40 83       	st	Z, r20
				*update = true;
     896:	81 e0       	ldi	r24, 0x01	; 1
     898:	f5 01       	movw	r30, r10
     89a:	80 83       	st	Z, r24
     89c:	66 c0       	rjmp	.+204    	; 0x96a <HandleInput+0x1da>
			}
		}
	}
	else if(Read(P_UP, 'D'))
     89e:	64 e4       	ldi	r22, 0x44	; 68
     8a0:	80 e0       	ldi	r24, 0x00	; 0
     8a2:	0e 94 55 02 	call	0x4aa	; 0x4aa <Read>
     8a6:	88 23       	and	r24, r24
     8a8:	c9 f1       	breq	.+114    	; 0x91c <HandleInput+0x18c>
     8aa:	8b e4       	ldi	r24, 0x4B	; 75
     8ac:	9d e1       	ldi	r25, 0x1D	; 29
     8ae:	01 97       	sbiw	r24, 0x01	; 1
     8b0:	f1 f7       	brne	.-4      	; 0x8ae <HandleInput+0x11e>
     8b2:	00 c0       	rjmp	.+0      	; 0x8b4 <HandleInput+0x124>
     8b4:	00 00       	nop
	{
		_delay_ms(30);
		if(Read(P_UP, 'D'))
     8b6:	64 e4       	ldi	r22, 0x44	; 68
     8b8:	80 e0       	ldi	r24, 0x00	; 0
     8ba:	0e 94 55 02 	call	0x4aa	; 0x4aa <Read>
     8be:	88 23       	and	r24, r24
     8c0:	09 f4       	brne	.+2      	; 0x8c4 <HandleInput+0x134>
     8c2:	53 c0       	rjmp	.+166    	; 0x96a <HandleInput+0x1da>
		{
			if((*indexPg == 0) && (*selection > 0))
     8c4:	88 81       	ld	r24, Y
     8c6:	81 11       	cpse	r24, r1
     8c8:	0a c0       	rjmp	.+20     	; 0x8de <HandleInput+0x14e>
     8ca:	f6 01       	movw	r30, r12
     8cc:	90 81       	ld	r25, Z
     8ce:	99 23       	and	r25, r25
     8d0:	31 f0       	breq	.+12     	; 0x8de <HandleInput+0x14e>
			{
				(*selection)--;
     8d2:	91 50       	subi	r25, 0x01	; 1
     8d4:	90 83       	st	Z, r25
				*update = true;
     8d6:	81 e0       	ldi	r24, 0x01	; 1
     8d8:	f5 01       	movw	r30, r10
     8da:	80 83       	st	Z, r24
     8dc:	46 c0       	rjmp	.+140    	; 0x96a <HandleInput+0x1da>
			}
			else if((*indexPg == 1) && (*selection == 0) && (*scrollIndex > 0))
     8de:	81 30       	cpi	r24, 0x01	; 1
     8e0:	69 f4       	brne	.+26     	; 0x8fc <HandleInput+0x16c>
     8e2:	f6 01       	movw	r30, r12
     8e4:	90 81       	ld	r25, Z
     8e6:	91 11       	cpse	r25, r1
     8e8:	09 c0       	rjmp	.+18     	; 0x8fc <HandleInput+0x16c>
     8ea:	f4 01       	movw	r30, r8
     8ec:	90 81       	ld	r25, Z
     8ee:	99 23       	and	r25, r25
     8f0:	29 f0       	breq	.+10     	; 0x8fc <HandleInput+0x16c>
			{
				(*scrollIndex)--;
     8f2:	91 50       	subi	r25, 0x01	; 1
     8f4:	90 83       	st	Z, r25
				*update = true;
     8f6:	f5 01       	movw	r30, r10
     8f8:	80 83       	st	Z, r24
     8fa:	37 c0       	rjmp	.+110    	; 0x96a <HandleInput+0x1da>
			}
			else if((*indexPg == 1) && (*selection > 0) && ((*scrollIndex) > 0))
     8fc:	81 30       	cpi	r24, 0x01	; 1
     8fe:	a9 f5       	brne	.+106    	; 0x96a <HandleInput+0x1da>
     900:	f6 01       	movw	r30, r12
     902:	80 81       	ld	r24, Z
     904:	88 23       	and	r24, r24
     906:	89 f1       	breq	.+98     	; 0x96a <HandleInput+0x1da>
     908:	f4 01       	movw	r30, r8
     90a:	80 81       	ld	r24, Z
     90c:	88 23       	and	r24, r24
     90e:	69 f1       	breq	.+90     	; 0x96a <HandleInput+0x1da>
			{
				(*scrollIndex)--;
     910:	81 50       	subi	r24, 0x01	; 1
     912:	80 83       	st	Z, r24
				*update = true;
     914:	81 e0       	ldi	r24, 0x01	; 1
     916:	f5 01       	movw	r30, r10
     918:	80 83       	st	Z, r24
     91a:	27 c0       	rjmp	.+78     	; 0x96a <HandleInput+0x1da>
			}	
		}
	}
	else if(Read(P_LFT, 'D'))
     91c:	64 e4       	ldi	r22, 0x44	; 68
     91e:	82 e0       	ldi	r24, 0x02	; 2
     920:	0e 94 55 02 	call	0x4aa	; 0x4aa <Read>
     924:	88 23       	and	r24, r24
     926:	09 f1       	breq	.+66     	; 0x96a <HandleInput+0x1da>
     928:	8b e4       	ldi	r24, 0x4B	; 75
     92a:	9d e1       	ldi	r25, 0x1D	; 29
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	f1 f7       	brne	.-4      	; 0x92c <HandleInput+0x19c>
     930:	00 c0       	rjmp	.+0      	; 0x932 <HandleInput+0x1a2>
     932:	00 00       	nop
	{
		_delay_ms(30);
		if(Read(P_LFT, 'D'))
     934:	64 e4       	ldi	r22, 0x44	; 68
     936:	82 e0       	ldi	r24, 0x02	; 2
     938:	0e 94 55 02 	call	0x4aa	; 0x4aa <Read>
     93c:	88 23       	and	r24, r24
     93e:	a9 f0       	breq	.+42     	; 0x96a <HandleInput+0x1da>
		{
			if(*indexPg == 1)
     940:	88 81       	ld	r24, Y
     942:	81 30       	cpi	r24, 0x01	; 1
     944:	41 f4       	brne	.+16     	; 0x956 <HandleInput+0x1c6>
			{
				(*scrollIndex) = 0;
     946:	f4 01       	movw	r30, r8
     948:	10 82       	st	Z, r1
				(*indexPg)--;
     94a:	88 81       	ld	r24, Y
     94c:	81 50       	subi	r24, 0x01	; 1
     94e:	88 83       	st	Y, r24
				*update = true;
     950:	81 e0       	ldi	r24, 0x01	; 1
     952:	f5 01       	movw	r30, r10
     954:	80 83       	st	Z, r24
			}
			if((*indexPg == 2) || (*indexPg == 3))
     956:	88 81       	ld	r24, Y
     958:	82 50       	subi	r24, 0x02	; 2
     95a:	82 30       	cpi	r24, 0x02	; 2
     95c:	30 f4       	brcc	.+12     	; 0x96a <HandleInput+0x1da>
			{
				(*scrollIndex) = 0;
     95e:	f4 01       	movw	r30, r8
     960:	10 82       	st	Z, r1
				(*indexPg) = 0;
     962:	18 82       	st	Y, r1
				*update = true;
     964:	81 e0       	ldi	r24, 0x01	; 1
     966:	f5 01       	movw	r30, r10
     968:	80 83       	st	Z, r24
			}	
		}
	}
}
     96a:	df 91       	pop	r29
     96c:	cf 91       	pop	r28
     96e:	1f 91       	pop	r17
     970:	0f 91       	pop	r16
     972:	ff 90       	pop	r15
     974:	ef 90       	pop	r14
     976:	df 90       	pop	r13
     978:	cf 90       	pop	r12
     97a:	bf 90       	pop	r11
     97c:	af 90       	pop	r10
     97e:	9f 90       	pop	r9
     980:	8f 90       	pop	r8
     982:	08 95       	ret

00000984 <main>:

void main(void)
{
     984:	cf 93       	push	r28
     986:	df 93       	push	r29
     988:	cd b7       	in	r28, 0x3d	; 61
     98a:	de b7       	in	r29, 0x3e	; 62
     98c:	c4 59       	subi	r28, 0x94	; 148
     98e:	d1 09       	sbc	r29, r1
     990:	0f b6       	in	r0, 0x3f	; 63
     992:	f8 94       	cli
     994:	de bf       	out	0x3e, r29	; 62
     996:	0f be       	out	0x3f, r0	; 63
     998:	cd bf       	out	0x3d, r28	; 61
	unsigned char scrollIndex = 0;
     99a:	19 82       	std	Y+1, r1	; 0x01
	unsigned char indexPg = 0;
     99c:	1a 82       	std	Y+2, r1	; 0x02
	unsigned char selection = 0;
     99e:	1b 82       	std	Y+3, r1	; 0x03
    unsigned char i;
	unsigned char j;
	unsigned char scrollLength = 0;
     9a0:	1c 82       	std	Y+4, r1	; 0x04
	unsigned char strikes = 0;
	char strWord[17];
	char strStrikes[17] = "Strikes: ______"; // 9, 10, 11, 12, 13, 14 are the X's
     9a2:	80 e1       	ldi	r24, 0x10	; 16
     9a4:	e5 e0       	ldi	r30, 0x05	; 5
     9a6:	f1 e0       	ldi	r31, 0x01	; 1
     9a8:	de 01       	movw	r26, r28
     9aa:	56 96       	adiw	r26, 0x16	; 22
     9ac:	01 90       	ld	r0, Z+
     9ae:	0d 92       	st	X+, r0
     9b0:	8a 95       	dec	r24
     9b2:	e1 f7       	brne	.-8      	; 0x9ac <main+0x28>
     9b4:	1e a2       	std	Y+38, r1	; 0x26
	char alphabet[26] = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
     9b6:	8a e1       	ldi	r24, 0x1A	; 26
     9b8:	e6 e1       	ldi	r30, 0x16	; 22
     9ba:	f1 e0       	ldi	r31, 0x01	; 1
     9bc:	de 01       	movw	r26, r28
     9be:	97 96       	adiw	r26, 0x27	; 39
     9c0:	01 90       	ld	r0, Z+
     9c2:	0d 92       	st	X+, r0
     9c4:	8a 95       	dec	r24
     9c6:	e1 f7       	brne	.-8      	; 0x9c0 <main+0x3c>
	char chList[26];
	char chListGuessed[26];
	bool update = true;
     9c8:	81 e0       	ldi	r24, 0x01	; 1
     9ca:	e6 96       	adiw	r28, 0x36	; 54
     9cc:	8f af       	std	Y+63, r24	; 0x3f
     9ce:	e6 97       	sbiw	r28, 0x36	; 54
	bool confirmSelect = false;
     9d0:	e7 96       	adiw	r28, 0x37	; 55
     9d2:	1f ae       	std	Y+63, r1	; 0x3f
     9d4:	e7 97       	sbiw	r28, 0x37	; 55
	bool generate = true;
    TCNT0 = 0x00;                                   // Set timer to 0
     9d6:	16 bc       	out	0x26, r1	; 38
    TCCR0B = (1 << CS00) | (1 << CS02);             // Set pre-scalar as 1024
     9d8:	85 e0       	ldi	r24, 0x05	; 5
     9da:	85 bd       	out	0x25, r24	; 37
    TIMSK0 = (1 << OCIE0A) | (1 << TOIE0);          // Timer0 interrupt setup
     9dc:	83 e0       	ldi	r24, 0x03	; 3
     9de:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7fc06e>
	initInput();
     9e2:	0e 94 ab 03 	call	0x756	; 0x756 <initInput>
	DisplayInit();
     9e6:	0e 94 16 03 	call	0x62c	; 0x62c <DisplayInit>
	DisplayClear();
     9ea:	0e 94 00 03 	call	0x600	; 0x600 <DisplayClear>
	srand(67);
     9ee:	83 e4       	ldi	r24, 0x43	; 67
     9f0:	90 e0       	ldi	r25, 0x00	; 0
     9f2:	0e 94 85 08 	call	0x110a	; 0x110a <srand>
	char alphabet[26] = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
	char chList[26];
	char chListGuessed[26];
	bool update = true;
	bool confirmSelect = false;
	bool generate = true;
     9f6:	cc 24       	eor	r12, r12
     9f8:	c3 94       	inc	r12
	unsigned char indexPg = 0;
	unsigned char selection = 0;
    unsigned char i;
	unsigned char j;
	unsigned char scrollLength = 0;
	unsigned char strikes = 0;
     9fa:	d1 2c       	mov	r13, r1
	DisplayInit();
	DisplayClear();
	srand(67);
    while (1)
    {
		HandleInput(&indexPg, &update, &selection, &scrollIndex, &scrollLength, &confirmSelect);
     9fc:	ae 01       	movw	r20, r28
     9fe:	4a 58       	subi	r20, 0x8A	; 138
     a00:	5f 4f       	sbci	r21, 0xFF	; 255
     a02:	7a 01       	movw	r14, r20
     a04:	8e 01       	movw	r16, r28
     a06:	0c 5f       	subi	r16, 0xFC	; 252
     a08:	1f 4f       	sbci	r17, 0xFF	; 255
     a0a:	9e 01       	movw	r18, r28
     a0c:	2f 5f       	subi	r18, 0xFF	; 255
     a0e:	3f 4f       	sbci	r19, 0xFF	; 255
     a10:	43 57       	subi	r20, 0x73	; 115
     a12:	51 09       	sbc	r21, r1
     a14:	be 01       	movw	r22, r28
     a16:	6b 58       	subi	r22, 0x8B	; 139
     a18:	7f 4f       	sbci	r23, 0xFF	; 255
     a1a:	ce 01       	movw	r24, r28
     a1c:	02 96       	adiw	r24, 0x02	; 2
     a1e:	0e 94 c8 03 	call	0x790	; 0x790 <HandleInput>
		if(update && indexPg == 0)
     a22:	e6 96       	adiw	r28, 0x36	; 54
     a24:	8f ad       	ldd	r24, Y+63	; 0x3f
     a26:	e6 97       	sbiw	r28, 0x36	; 54
     a28:	88 23       	and	r24, r24
     a2a:	e1 f1       	breq	.+120    	; 0xaa4 <main+0x120>
     a2c:	9a 81       	ldd	r25, Y+2	; 0x02
     a2e:	91 11       	cpse	r25, r1
     a30:	39 c0       	rjmp	.+114    	; 0xaa4 <main+0x120>
		{
			update = false;
     a32:	e6 96       	adiw	r28, 0x36	; 54
     a34:	1f ae       	std	Y+63, r1	; 0x3f
     a36:	e6 97       	sbiw	r28, 0x36	; 54
			DisplayClear();
     a38:	0e 94 00 03 	call	0x600	; 0x600 <DisplayClear>
			if(selection == 0)
     a3c:	8b 81       	ldd	r24, Y+3	; 0x03
     a3e:	81 11       	cpse	r24, r1
     a40:	06 c0       	rjmp	.+12     	; 0xa4e <main+0xca>
			{
				DisplayPrintLine(0,0,">1. Start Game");
     a42:	41 e3       	ldi	r20, 0x31	; 49
     a44:	51 e0       	ldi	r21, 0x01	; 1
     a46:	60 e0       	ldi	r22, 0x00	; 0
     a48:	0e 94 89 03 	call	0x712	; 0x712 <DisplayPrintLine>
     a4c:	06 c0       	rjmp	.+12     	; 0xa5a <main+0xd6>
			}
			else
			{
				DisplayPrintLine(0,0,"1. Start Game");
     a4e:	42 e3       	ldi	r20, 0x32	; 50
     a50:	51 e0       	ldi	r21, 0x01	; 1
     a52:	60 e0       	ldi	r22, 0x00	; 0
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	0e 94 89 03 	call	0x712	; 0x712 <DisplayPrintLine>
			}
			if(selection == 1)
     a5a:	8b 81       	ldd	r24, Y+3	; 0x03
     a5c:	81 30       	cpi	r24, 0x01	; 1
     a5e:	31 f4       	brne	.+12     	; 0xa6c <main+0xe8>
			{
				DisplayPrintLine(1,0,">2. How To Play");
     a60:	40 e4       	ldi	r20, 0x40	; 64
     a62:	51 e0       	ldi	r21, 0x01	; 1
     a64:	60 e0       	ldi	r22, 0x00	; 0
     a66:	0e 94 89 03 	call	0x712	; 0x712 <DisplayPrintLine>
     a6a:	06 c0       	rjmp	.+12     	; 0xa78 <main+0xf4>
			}
			else
			{
				DisplayPrintLine(1,0,"2. How To Play");
     a6c:	41 e4       	ldi	r20, 0x41	; 65
     a6e:	51 e0       	ldi	r21, 0x01	; 1
     a70:	60 e0       	ldi	r22, 0x00	; 0
     a72:	81 e0       	ldi	r24, 0x01	; 1
     a74:	0e 94 89 03 	call	0x712	; 0x712 <DisplayPrintLine>
			}
			if(selection == 2)
     a78:	8b 81       	ldd	r24, Y+3	; 0x03
     a7a:	82 30       	cpi	r24, 0x02	; 2
     a7c:	31 f4       	brne	.+12     	; 0xa8a <main+0x106>
			{
				DisplayPrintLine(2,0,">3. About");	
     a7e:	40 e5       	ldi	r20, 0x50	; 80
     a80:	51 e0       	ldi	r21, 0x01	; 1
     a82:	60 e0       	ldi	r22, 0x00	; 0
     a84:	0e 94 89 03 	call	0x712	; 0x712 <DisplayPrintLine>
     a88:	06 c0       	rjmp	.+12     	; 0xa96 <main+0x112>
			}
			else
			{
				DisplayPrintLine(2,0,"3. About");
     a8a:	41 e5       	ldi	r20, 0x51	; 81
     a8c:	51 e0       	ldi	r21, 0x01	; 1
     a8e:	60 e0       	ldi	r22, 0x00	; 0
     a90:	82 e0       	ldi	r24, 0x02	; 2
     a92:	0e 94 89 03 	call	0x712	; 0x712 <DisplayPrintLine>
			}
			DisplayPrintLine(5,0,"        ^    v    >");
     a96:	4a e5       	ldi	r20, 0x5A	; 90
     a98:	51 e0       	ldi	r21, 0x01	; 1
     a9a:	60 e0       	ldi	r22, 0x00	; 0
     a9c:	85 e0       	ldi	r24, 0x05	; 5
     a9e:	0e 94 89 03 	call	0x712	; 0x712 <DisplayPrintLine>
     aa2:	ac cf       	rjmp	.-168    	; 0x9fc <main+0x78>
		}
		else if(update && indexPg == 1)
     aa4:	88 23       	and	r24, r24
     aa6:	09 f4       	brne	.+2      	; 0xaaa <main+0x126>
     aa8:	91 c2       	rjmp	.+1314   	; 0xfcc <main+0x648>
     aaa:	9a 81       	ldd	r25, Y+2	; 0x02
     aac:	91 30       	cpi	r25, 0x01	; 1
     aae:	09 f0       	breq	.+2      	; 0xab2 <main+0x12e>
     ab0:	8d c2       	rjmp	.+1306   	; 0xfcc <main+0x648>
		{
			update = false;
     ab2:	e6 96       	adiw	r28, 0x36	; 54
     ab4:	1f ae       	std	Y+63, r1	; 0x3f
     ab6:	e6 97       	sbiw	r28, 0x36	; 54
			DisplayClear();
     ab8:	0e 94 00 03 	call	0x600	; 0x600 <DisplayClear>
			if(selection == 0)
     abc:	8b 81       	ldd	r24, Y+3	; 0x03
     abe:	81 11       	cpse	r24, r1
     ac0:	3d c2       	rjmp	.+1146   	; 0xf3c <main+0x5b8>
			{
				scrollLength = 25;
     ac2:	89 e1       	ldi	r24, 0x19	; 25
     ac4:	8c 83       	std	Y+4, r24	; 0x04
				// main game
				if(generate)
     ac6:	cc 20       	and	r12, r12
     ac8:	09 f4       	brne	.+2      	; 0xacc <main+0x148>
     aca:	58 c0       	rjmp	.+176    	; 0xb7c <main+0x1f8>
				{
					unsigned char randNum = rand() / (RAND_MAX / 5 + 1);
     acc:	0e 94 80 08 	call	0x1100	; 0x1100 <rand>
     ad0:	6a e9       	ldi	r22, 0x9A	; 154
     ad2:	79 e1       	ldi	r23, 0x19	; 25
     ad4:	0e 94 0c 08 	call	0x1018	; 0x1018 <__divmodhi4>
					strcpy_P(strWord, (char*)pgm_read_word(&(TXT_WORDTOGUESS[randNum])));
     ad8:	fb 01       	movw	r30, r22
     ada:	ff 27       	eor	r31, r31
     adc:	ee 0f       	add	r30, r30
     ade:	ff 1f       	adc	r31, r31
     ae0:	e4 58       	subi	r30, 0x84	; 132
     ae2:	ff 4f       	sbci	r31, 0xFF	; 255
     ae4:	65 91       	lpm	r22, Z+
     ae6:	74 91       	lpm	r23, Z
     ae8:	ce 01       	movw	r24, r28
     aea:	05 96       	adiw	r24, 0x05	; 5
     aec:	0e 94 90 08 	call	0x1120	; 0x1120 <strcpy_P>
					bool isLetter = false;
					for(i = 0; i < strlen(strWord); i++)
     af0:	30 e0       	ldi	r19, 0x00	; 0
     af2:	35 c0       	rjmp	.+106    	; 0xb5e <main+0x1da>
					{
						for(j = 0; j < strlen(chList); j++)
						{
							if(chList[j] == strWord[i])
     af4:	e1 e4       	ldi	r30, 0x41	; 65
     af6:	f0 e0       	ldi	r31, 0x00	; 0
     af8:	ec 0f       	add	r30, r28
     afa:	fd 1f       	adc	r31, r29
     afc:	e2 0f       	add	r30, r18
     afe:	f1 1d       	adc	r31, r1
     b00:	90 81       	ld	r25, Z
     b02:	e5 e0       	ldi	r30, 0x05	; 5
     b04:	f0 e0       	ldi	r31, 0x00	; 0
     b06:	ec 0f       	add	r30, r28
     b08:	fd 1f       	adc	r31, r29
     b0a:	e3 0f       	add	r30, r19
     b0c:	f1 1d       	adc	r31, r1
     b0e:	80 81       	ld	r24, Z
     b10:	98 13       	cpse	r25, r24
     b12:	01 c0       	rjmp	.+2      	; 0xb16 <main+0x192>
							{
								isLetter = true;
     b14:	41 e0       	ldi	r20, 0x01	; 1
					unsigned char randNum = rand() / (RAND_MAX / 5 + 1);
					strcpy_P(strWord, (char*)pgm_read_word(&(TXT_WORDTOGUESS[randNum])));
					bool isLetter = false;
					for(i = 0; i < strlen(strWord); i++)
					{
						for(j = 0; j < strlen(chList); j++)
     b16:	2f 5f       	subi	r18, 0xFF	; 255
     b18:	02 c0       	rjmp	.+4      	; 0xb1e <main+0x19a>
     b1a:	40 e0       	ldi	r20, 0x00	; 0
     b1c:	20 e0       	ldi	r18, 0x00	; 0
     b1e:	82 2f       	mov	r24, r18
     b20:	90 e0       	ldi	r25, 0x00	; 0
     b22:	de 01       	movw	r26, r28
     b24:	af 5b       	subi	r26, 0xBF	; 191
     b26:	bf 4f       	sbci	r27, 0xFF	; 255
     b28:	fd 01       	movw	r30, r26
     b2a:	01 90       	ld	r0, Z+
     b2c:	00 20       	and	r0, r0
     b2e:	e9 f7       	brne	.-6      	; 0xb2a <main+0x1a6>
     b30:	31 97       	sbiw	r30, 0x01	; 1
     b32:	ea 1b       	sub	r30, r26
     b34:	fb 0b       	sbc	r31, r27
     b36:	8e 17       	cp	r24, r30
     b38:	9f 07       	cpc	r25, r31
     b3a:	e0 f2       	brcs	.-72     	; 0xaf4 <main+0x170>
							if(chList[j] == strWord[i])
							{
								isLetter = true;
							}
						}
						if(!isLetter)
     b3c:	41 11       	cpse	r20, r1
     b3e:	0e c0       	rjmp	.+28     	; 0xb5c <main+0x1d8>
						{
							chList[strlen(chList)] = strWord[i];
     b40:	a5 e0       	ldi	r26, 0x05	; 5
     b42:	b0 e0       	ldi	r27, 0x00	; 0
     b44:	ac 0f       	add	r26, r28
     b46:	bd 1f       	adc	r27, r29
     b48:	a3 0f       	add	r26, r19
     b4a:	b1 1d       	adc	r27, r1
     b4c:	8c 91       	ld	r24, X
     b4e:	41 e4       	ldi	r20, 0x41	; 65
     b50:	50 e0       	ldi	r21, 0x00	; 0
     b52:	4c 0f       	add	r20, r28
     b54:	5d 1f       	adc	r21, r29
     b56:	e4 0f       	add	r30, r20
     b58:	f5 1f       	adc	r31, r21
     b5a:	80 83       	st	Z, r24
				if(generate)
				{
					unsigned char randNum = rand() / (RAND_MAX / 5 + 1);
					strcpy_P(strWord, (char*)pgm_read_word(&(TXT_WORDTOGUESS[randNum])));
					bool isLetter = false;
					for(i = 0; i < strlen(strWord); i++)
     b5c:	3f 5f       	subi	r19, 0xFF	; 255
     b5e:	83 2f       	mov	r24, r19
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	de 01       	movw	r26, r28
     b64:	15 96       	adiw	r26, 0x05	; 5
     b66:	fd 01       	movw	r30, r26
     b68:	01 90       	ld	r0, Z+
     b6a:	00 20       	and	r0, r0
     b6c:	e9 f7       	brne	.-6      	; 0xb68 <main+0x1e4>
     b6e:	31 97       	sbiw	r30, 0x01	; 1
     b70:	ea 1b       	sub	r30, r26
     b72:	fb 0b       	sbc	r31, r27
     b74:	8e 17       	cp	r24, r30
     b76:	9f 07       	cpc	r25, r31
     b78:	80 f2       	brcs	.-96     	; 0xb1a <main+0x196>
						{
							chList[strlen(chList)] = strWord[i];
						}
						isLetter = false;
					}
					generate = false;
     b7a:	c1 2c       	mov	r12, r1
				}
				if(confirmSelect)
     b7c:	e7 96       	adiw	r28, 0x37	; 55
     b7e:	8f ad       	ldd	r24, Y+63	; 0x3f
     b80:	e7 97       	sbiw	r28, 0x37	; 55
     b82:	81 11       	cpse	r24, r1
     b84:	32 c0       	rjmp	.+100    	; 0xbea <main+0x266>
     b86:	69 c0       	rjmp	.+210    	; 0xc5a <main+0x2d6>
				{
					bool isCorrectGuess = false;
					bool isLetter = false;
					for(i = 0; i < strlen(chList); i++)
					{
						if(alphabet[scrollIndex] == chList[i])
     b88:	89 81       	ldd	r24, Y+1	; 0x01
     b8a:	e7 e2       	ldi	r30, 0x27	; 39
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	ec 0f       	add	r30, r28
     b90:	fd 1f       	adc	r31, r29
     b92:	e8 0f       	add	r30, r24
     b94:	f1 1d       	adc	r31, r1
     b96:	30 81       	ld	r19, Z
     b98:	e1 e4       	ldi	r30, 0x41	; 65
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	ec 0f       	add	r30, r28
     b9e:	fd 1f       	adc	r31, r29
     ba0:	e4 0f       	add	r30, r20
     ba2:	f1 1d       	adc	r31, r1
     ba4:	80 81       	ld	r24, Z
     ba6:	38 13       	cpse	r19, r24
     ba8:	1e c0       	rjmp	.+60     	; 0xbe6 <main+0x262>
     baa:	0c c0       	rjmp	.+24     	; 0xbc4 <main+0x240>
						{
							isCorrectGuess = true;
							for(j = 0; j < strlen(chListGuessed); j++)
							{
								if(alphabet[scrollIndex] == chListGuessed[j])
     bac:	eb e5       	ldi	r30, 0x5B	; 91
     bae:	f0 e0       	ldi	r31, 0x00	; 0
     bb0:	ec 0f       	add	r30, r28
     bb2:	fd 1f       	adc	r31, r29
     bb4:	e2 0f       	add	r30, r18
     bb6:	f1 1d       	adc	r31, r1
     bb8:	80 81       	ld	r24, Z
     bba:	38 13       	cpse	r19, r24
     bbc:	01 c0       	rjmp	.+2      	; 0xbc0 <main+0x23c>
								{
									isLetter = true;
     bbe:	51 e0       	ldi	r21, 0x01	; 1
					for(i = 0; i < strlen(chList); i++)
					{
						if(alphabet[scrollIndex] == chList[i])
						{
							isCorrectGuess = true;
							for(j = 0; j < strlen(chListGuessed); j++)
     bc0:	2f 5f       	subi	r18, 0xFF	; 255
     bc2:	01 c0       	rjmp	.+2      	; 0xbc6 <main+0x242>
     bc4:	20 e0       	ldi	r18, 0x00	; 0
     bc6:	82 2f       	mov	r24, r18
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	de 01       	movw	r26, r28
     bcc:	a5 5a       	subi	r26, 0xA5	; 165
     bce:	bf 4f       	sbci	r27, 0xFF	; 255
     bd0:	fd 01       	movw	r30, r26
     bd2:	01 90       	ld	r0, Z+
     bd4:	00 20       	and	r0, r0
     bd6:	e9 f7       	brne	.-6      	; 0xbd2 <main+0x24e>
     bd8:	31 97       	sbiw	r30, 0x01	; 1
     bda:	ea 1b       	sub	r30, r26
     bdc:	fb 0b       	sbc	r31, r27
     bde:	8e 17       	cp	r24, r30
     be0:	9f 07       	cpc	r25, r31
     be2:	20 f3       	brcs	.-56     	; 0xbac <main+0x228>
					bool isLetter = false;
					for(i = 0; i < strlen(chList); i++)
					{
						if(alphabet[scrollIndex] == chList[i])
						{
							isCorrectGuess = true;
     be4:	21 e0       	ldi	r18, 0x01	; 1
				}
				if(confirmSelect)
				{
					bool isCorrectGuess = false;
					bool isLetter = false;
					for(i = 0; i < strlen(chList); i++)
     be6:	4f 5f       	subi	r20, 0xFF	; 255
     be8:	03 c0       	rjmp	.+6      	; 0xbf0 <main+0x26c>
     bea:	50 e0       	ldi	r21, 0x00	; 0
     bec:	20 e0       	ldi	r18, 0x00	; 0
     bee:	40 e0       	ldi	r20, 0x00	; 0
     bf0:	84 2f       	mov	r24, r20
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	de 01       	movw	r26, r28
     bf6:	af 5b       	subi	r26, 0xBF	; 191
     bf8:	bf 4f       	sbci	r27, 0xFF	; 255
     bfa:	fd 01       	movw	r30, r26
     bfc:	01 90       	ld	r0, Z+
     bfe:	00 20       	and	r0, r0
     c00:	e9 f7       	brne	.-6      	; 0xbfc <main+0x278>
     c02:	31 97       	sbiw	r30, 0x01	; 1
     c04:	ea 1b       	sub	r30, r26
     c06:	fb 0b       	sbc	r31, r27
     c08:	8e 17       	cp	r24, r30
     c0a:	9f 07       	cpc	r25, r31
     c0c:	08 f4       	brcc	.+2      	; 0xc10 <main+0x28c>
     c0e:	bc cf       	rjmp	.-136    	; 0xb88 <main+0x204>
									isLetter = true;
								}
							}
						}
					}
					if(!isLetter && isCorrectGuess)
     c10:	51 11       	cpse	r21, r1
     c12:	12 c0       	rjmp	.+36     	; 0xc38 <main+0x2b4>
     c14:	22 23       	and	r18, r18
     c16:	81 f0       	breq	.+32     	; 0xc38 <main+0x2b4>
					{
						chListGuessed[strlen(chListGuessed)] = alphabet[scrollIndex];
     c18:	fe 01       	movw	r30, r28
     c1a:	e5 5a       	subi	r30, 0xA5	; 165
     c1c:	ff 4f       	sbci	r31, 0xFF	; 255
     c1e:	01 90       	ld	r0, Z+
     c20:	00 20       	and	r0, r0
     c22:	e9 f7       	brne	.-6      	; 0xc1e <main+0x29a>
     c24:	89 81       	ldd	r24, Y+1	; 0x01
     c26:	a7 e2       	ldi	r26, 0x27	; 39
     c28:	b0 e0       	ldi	r27, 0x00	; 0
     c2a:	ac 0f       	add	r26, r28
     c2c:	bd 1f       	adc	r27, r29
     c2e:	a8 0f       	add	r26, r24
     c30:	b1 1d       	adc	r27, r1
     c32:	8c 91       	ld	r24, X
     c34:	31 97       	sbiw	r30, 0x01	; 1
     c36:	80 83       	st	Z, r24
					}
					if(!isCorrectGuess)
     c38:	21 11       	cpse	r18, r1
     c3a:	0c c0       	rjmp	.+24     	; 0xc54 <main+0x2d0>
					{
						strikes++;
     c3c:	d3 94       	inc	r13
						strStrikes[strikes + 8] = 'X';
     c3e:	ed 2d       	mov	r30, r13
     c40:	f0 e0       	ldi	r31, 0x00	; 0
     c42:	38 96       	adiw	r30, 0x08	; 8
     c44:	86 e1       	ldi	r24, 0x16	; 22
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	8c 0f       	add	r24, r28
     c4a:	9d 1f       	adc	r25, r29
     c4c:	e8 0f       	add	r30, r24
     c4e:	f9 1f       	adc	r31, r25
     c50:	88 e5       	ldi	r24, 0x58	; 88
     c52:	80 83       	st	Z, r24
					}
					confirmSelect = false;
     c54:	e7 96       	adiw	r28, 0x37	; 55
     c56:	1f ae       	std	Y+63, r1	; 0x3f
     c58:	e7 97       	sbiw	r28, 0x37	; 55
				}
				
				if(strikes < 6)
     c5a:	95 e0       	ldi	r25, 0x05	; 5
     c5c:	9d 15       	cp	r25, r13
     c5e:	08 f4       	brcc	.+2      	; 0xc62 <main+0x2de>
     c60:	32 c1       	rjmp	.+612    	; 0xec6 <main+0x542>
				{
					DisplayPrintLine(0,0,"In Strikes < 6!");
     c62:	4e e6       	ldi	r20, 0x6E	; 110
     c64:	51 e0       	ldi	r21, 0x01	; 1
     c66:	60 e0       	ldi	r22, 0x00	; 0
     c68:	80 e0       	ldi	r24, 0x00	; 0
     c6a:	0e 94 89 03 	call	0x712	; 0x712 <DisplayPrintLine>
					if(strlen(chList) == strlen(chListGuessed))
     c6e:	de 01       	movw	r26, r28
     c70:	af 5b       	subi	r26, 0xBF	; 191
     c72:	bf 4f       	sbci	r27, 0xFF	; 255
     c74:	fd 01       	movw	r30, r26
     c76:	01 90       	ld	r0, Z+
     c78:	00 20       	and	r0, r0
     c7a:	e9 f7       	brne	.-6      	; 0xc76 <main+0x2f2>
     c7c:	31 97       	sbiw	r30, 0x01	; 1
     c7e:	cf 01       	movw	r24, r30
     c80:	8a 1b       	sub	r24, r26
     c82:	9b 0b       	sbc	r25, r27
     c84:	5a 96       	adiw	r26, 0x1a	; 26
     c86:	fd 01       	movw	r30, r26
     c88:	01 90       	ld	r0, Z+
     c8a:	00 20       	and	r0, r0
     c8c:	e9 f7       	brne	.-6      	; 0xc88 <main+0x304>
     c8e:	31 97       	sbiw	r30, 0x01	; 1
     c90:	ea 1b       	sub	r30, r26
     c92:	fb 0b       	sbc	r31, r27
     c94:	8e 17       	cp	r24, r30
     c96:	9f 07       	cpc	r25, r31
     c98:	a9 f5       	brne	.+106    	; 0xd04 <main+0x380>
					{
						scrollIndex = 0;
     c9a:	19 82       	std	Y+1, r1	; 0x01
						scrollLength = 0;
     c9c:	1c 82       	std	Y+4, r1	; 0x04
						selection = 0;
     c9e:	1b 82       	std	Y+3, r1	; 0x03
						strikes = 0;
						confirmSelect = false;
     ca0:	e7 96       	adiw	r28, 0x37	; 55
     ca2:	1f ae       	std	Y+63, r1	; 0x3f
     ca4:	e7 97       	sbiw	r28, 0x37	; 55
						memset(chList, 0, strlen(chList));
     ca6:	ce 01       	movw	r24, r28
     ca8:	8f 5b       	subi	r24, 0xBF	; 191
     caa:	9f 4f       	sbci	r25, 0xFF	; 255
     cac:	fc 01       	movw	r30, r24
     cae:	01 90       	ld	r0, Z+
     cb0:	00 20       	and	r0, r0
     cb2:	e9 f7       	brne	.-6      	; 0xcae <main+0x32a>
     cb4:	31 97       	sbiw	r30, 0x01	; 1
     cb6:	af 01       	movw	r20, r30
     cb8:	48 1b       	sub	r20, r24
     cba:	59 0b       	sbc	r21, r25
     cbc:	60 e0       	ldi	r22, 0x00	; 0
     cbe:	70 e0       	ldi	r23, 0x00	; 0
     cc0:	0e 94 97 08 	call	0x112e	; 0x112e <memset>
						memset(chListGuessed, 0, strlen(chListGuessed));
     cc4:	ce 01       	movw	r24, r28
     cc6:	85 5a       	subi	r24, 0xA5	; 165
     cc8:	9f 4f       	sbci	r25, 0xFF	; 255
     cca:	fc 01       	movw	r30, r24
     ccc:	01 90       	ld	r0, Z+
     cce:	00 20       	and	r0, r0
     cd0:	e9 f7       	brne	.-6      	; 0xccc <main+0x348>
     cd2:	31 97       	sbiw	r30, 0x01	; 1
     cd4:	af 01       	movw	r20, r30
     cd6:	48 1b       	sub	r20, r24
     cd8:	59 0b       	sbc	r21, r25
     cda:	60 e0       	ldi	r22, 0x00	; 0
     cdc:	70 e0       	ldi	r23, 0x00	; 0
     cde:	0e 94 97 08 	call	0x112e	; 0x112e <memset>
						strStrikes[9] = '_';
     ce2:	8f e5       	ldi	r24, 0x5F	; 95
     ce4:	8f 8f       	std	Y+31, r24	; 0x1f
						strStrikes[10] = '_';
     ce6:	88 a3       	std	Y+32, r24	; 0x20
						strStrikes[11] = '_';
     ce8:	89 a3       	std	Y+33, r24	; 0x21
						strStrikes[12] = '_';
     cea:	8a a3       	std	Y+34, r24	; 0x22
						strStrikes[13] = '_';
     cec:	8b a3       	std	Y+35, r24	; 0x23
						strStrikes[14] = '_';
     cee:	8c a3       	std	Y+36, r24	; 0x24
						generate = true;
						indexPg = 2;
     cf0:	82 e0       	ldi	r24, 0x02	; 2
     cf2:	8a 83       	std	Y+2, r24	; 0x02
						update = true;
     cf4:	81 e0       	ldi	r24, 0x01	; 1
     cf6:	e6 96       	adiw	r28, 0x36	; 54
     cf8:	8f af       	std	Y+63, r24	; 0x3f
     cfa:	e6 97       	sbiw	r28, 0x36	; 54
						strStrikes[10] = '_';
						strStrikes[11] = '_';
						strStrikes[12] = '_';
						strStrikes[13] = '_';
						strStrikes[14] = '_';
						generate = true;
     cfc:	cc 24       	eor	r12, r12
     cfe:	c3 94       	inc	r12
					if(strlen(chList) == strlen(chListGuessed))
					{
						scrollIndex = 0;
						scrollLength = 0;
						selection = 0;
						strikes = 0;
     d00:	d1 2c       	mov	r13, r1
     d02:	15 c1       	rjmp	.+554    	; 0xf2e <main+0x5aa>
						indexPg = 2;
						update = true;
					}
					else
					{
						DisplayPrintLine(0,0, strStrikes);
     d04:	ae 01       	movw	r20, r28
     d06:	4a 5e       	subi	r20, 0xEA	; 234
     d08:	5f 4f       	sbci	r21, 0xFF	; 255
     d0a:	60 e0       	ldi	r22, 0x00	; 0
     d0c:	80 e0       	ldi	r24, 0x00	; 0
     d0e:	0e 94 89 03 	call	0x712	; 0x712 <DisplayPrintLine>
						bool isLetter = false;
						for(i = 0; i < strlen(strWord); i++)
     d12:	00 e0       	ldi	r16, 0x00	; 0
     d14:	30 c0       	rjmp	.+96     	; 0xd76 <main+0x3f2>
						{
							for(j = 0; j < strlen(chListGuessed); j++)
							{
								if(chListGuessed[j] == strWord[i])
     d16:	eb e5       	ldi	r30, 0x5B	; 91
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	ec 0f       	add	r30, r28
     d1c:	fd 1f       	adc	r31, r29
     d1e:	e1 0f       	add	r30, r17
     d20:	f1 1d       	adc	r31, r1
     d22:	80 81       	ld	r24, Z
     d24:	e5 e0       	ldi	r30, 0x05	; 5
     d26:	f0 e0       	ldi	r31, 0x00	; 0
     d28:	ec 0f       	add	r30, r28
     d2a:	fd 1f       	adc	r31, r29
     d2c:	e0 0f       	add	r30, r16
     d2e:	f1 1d       	adc	r31, r1
     d30:	40 81       	ld	r20, Z
     d32:	84 13       	cpse	r24, r20
     d34:	05 c0       	rjmp	.+10     	; 0xd40 <main+0x3bc>
								{
									DisplayPrintChar(1, i, strWord[i]);
     d36:	60 2f       	mov	r22, r16
     d38:	81 e0       	ldi	r24, 0x01	; 1
     d3a:	0e 94 38 03 	call	0x670	; 0x670 <DisplayPrintChar>
									isLetter = true;
     d3e:	21 e0       	ldi	r18, 0x01	; 1
					{
						DisplayPrintLine(0,0, strStrikes);
						bool isLetter = false;
						for(i = 0; i < strlen(strWord); i++)
						{
							for(j = 0; j < strlen(chListGuessed); j++)
     d40:	1f 5f       	subi	r17, 0xFF	; 255
     d42:	02 c0       	rjmp	.+4      	; 0xd48 <main+0x3c4>
     d44:	20 e0       	ldi	r18, 0x00	; 0
     d46:	10 e0       	ldi	r17, 0x00	; 0
     d48:	81 2f       	mov	r24, r17
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	de 01       	movw	r26, r28
     d4e:	a5 5a       	subi	r26, 0xA5	; 165
     d50:	bf 4f       	sbci	r27, 0xFF	; 255
     d52:	fd 01       	movw	r30, r26
     d54:	01 90       	ld	r0, Z+
     d56:	00 20       	and	r0, r0
     d58:	e9 f7       	brne	.-6      	; 0xd54 <main+0x3d0>
     d5a:	31 97       	sbiw	r30, 0x01	; 1
     d5c:	ea 1b       	sub	r30, r26
     d5e:	fb 0b       	sbc	r31, r27
     d60:	8e 17       	cp	r24, r30
     d62:	9f 07       	cpc	r25, r31
     d64:	c0 f2       	brcs	.-80     	; 0xd16 <main+0x392>
								{
									DisplayPrintChar(1, i, strWord[i]);
									isLetter = true;
								}
							}
							if(!isLetter)
     d66:	21 11       	cpse	r18, r1
     d68:	05 c0       	rjmp	.+10     	; 0xd74 <main+0x3f0>
							{
								DisplayPrintChar(1, i, '_');
     d6a:	4f e5       	ldi	r20, 0x5F	; 95
     d6c:	60 2f       	mov	r22, r16
     d6e:	81 e0       	ldi	r24, 0x01	; 1
     d70:	0e 94 38 03 	call	0x670	; 0x670 <DisplayPrintChar>
					}
					else
					{
						DisplayPrintLine(0,0, strStrikes);
						bool isLetter = false;
						for(i = 0; i < strlen(strWord); i++)
     d74:	0f 5f       	subi	r16, 0xFF	; 255
     d76:	80 2f       	mov	r24, r16
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	de 01       	movw	r26, r28
     d7c:	15 96       	adiw	r26, 0x05	; 5
     d7e:	fd 01       	movw	r30, r26
     d80:	01 90       	ld	r0, Z+
     d82:	00 20       	and	r0, r0
     d84:	e9 f7       	brne	.-6      	; 0xd80 <main+0x3fc>
     d86:	31 97       	sbiw	r30, 0x01	; 1
     d88:	ea 1b       	sub	r30, r26
     d8a:	fb 0b       	sbc	r31, r27
     d8c:	8e 17       	cp	r24, r30
     d8e:	9f 07       	cpc	r25, r31
     d90:	c8 f2       	brcs	.-78     	; 0xd44 <main+0x3c0>
     d92:	10 e0       	ldi	r17, 0x00	; 0
     d94:	0c c0       	rjmp	.+24     	; 0xdae <main+0x42a>
							}
							isLetter = false;
						}
						for(i = 0; i < strlen(chListGuessed); i++)
						{
							DisplayPrintChar(2, i + 1, chListGuessed[i]);
     d96:	eb e5       	ldi	r30, 0x5B	; 91
     d98:	f0 e0       	ldi	r31, 0x00	; 0
     d9a:	ec 0f       	add	r30, r28
     d9c:	fd 1f       	adc	r31, r29
     d9e:	e1 0f       	add	r30, r17
     da0:	f1 1d       	adc	r31, r1
     da2:	40 81       	ld	r20, Z
     da4:	1f 5f       	subi	r17, 0xFF	; 255
     da6:	61 2f       	mov	r22, r17
     da8:	82 e0       	ldi	r24, 0x02	; 2
     daa:	0e 94 38 03 	call	0x670	; 0x670 <DisplayPrintChar>
							{
								DisplayPrintChar(1, i, '_');
							}
							isLetter = false;
						}
						for(i = 0; i < strlen(chListGuessed); i++)
     dae:	81 2f       	mov	r24, r17
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	de 01       	movw	r26, r28
     db4:	a5 5a       	subi	r26, 0xA5	; 165
     db6:	bf 4f       	sbci	r27, 0xFF	; 255
     db8:	fd 01       	movw	r30, r26
     dba:	01 90       	ld	r0, Z+
     dbc:	00 20       	and	r0, r0
     dbe:	e9 f7       	brne	.-6      	; 0xdba <main+0x436>
     dc0:	31 97       	sbiw	r30, 0x01	; 1
     dc2:	ea 1b       	sub	r30, r26
     dc4:	fb 0b       	sbc	r31, r27
     dc6:	8e 17       	cp	r24, r30
     dc8:	9f 07       	cpc	r25, r31
     dca:	28 f3       	brcs	.-54     	; 0xd96 <main+0x412>
						{
							DisplayPrintChar(2, i + 1, chListGuessed[i]);
						}
						//DisplayPrintLine(1,0, strWord);
						DisplayPrintChar(2,0, scrollIndex + '0');
     dcc:	49 81       	ldd	r20, Y+1	; 0x01
     dce:	40 5d       	subi	r20, 0xD0	; 208
     dd0:	60 e0       	ldi	r22, 0x00	; 0
     dd2:	82 e0       	ldi	r24, 0x02	; 2
     dd4:	0e 94 38 03 	call	0x670	; 0x670 <DisplayPrintChar>
						for(i = 0; i < 16; i++)
     dd8:	10 e0       	ldi	r17, 0x00	; 0
     dda:	30 c0       	rjmp	.+96     	; 0xe3c <main+0x4b8>
						{
							if(i < scrollIndex)
     ddc:	89 81       	ldd	r24, Y+1	; 0x01
     dde:	18 17       	cp	r17, r24
     de0:	60 f4       	brcc	.+24     	; 0xdfa <main+0x476>
							{
								DisplayPrintChar(3, i, alphabet[i]);	
     de2:	e7 e2       	ldi	r30, 0x27	; 39
     de4:	f0 e0       	ldi	r31, 0x00	; 0
     de6:	ec 0f       	add	r30, r28
     de8:	fd 1f       	adc	r31, r29
     dea:	e1 0f       	add	r30, r17
     dec:	f1 1d       	adc	r31, r1
     dee:	40 81       	ld	r20, Z
     df0:	61 2f       	mov	r22, r17
     df2:	83 e0       	ldi	r24, 0x03	; 3
     df4:	0e 94 38 03 	call	0x670	; 0x670 <DisplayPrintChar>
     df8:	20 c0       	rjmp	.+64     	; 0xe3a <main+0x4b6>
							}
							else if(i > scrollIndex)
     dfa:	81 17       	cp	r24, r17
     dfc:	68 f4       	brcc	.+26     	; 0xe18 <main+0x494>
							{
								DisplayPrintChar(3, i+1, alphabet[i]);
     dfe:	e7 e2       	ldi	r30, 0x27	; 39
     e00:	f0 e0       	ldi	r31, 0x00	; 0
     e02:	ec 0f       	add	r30, r28
     e04:	fd 1f       	adc	r31, r29
     e06:	e1 0f       	add	r30, r17
     e08:	f1 1d       	adc	r31, r1
     e0a:	40 81       	ld	r20, Z
     e0c:	61 e0       	ldi	r22, 0x01	; 1
     e0e:	61 0f       	add	r22, r17
     e10:	83 e0       	ldi	r24, 0x03	; 3
     e12:	0e 94 38 03 	call	0x670	; 0x670 <DisplayPrintChar>
     e16:	11 c0       	rjmp	.+34     	; 0xe3a <main+0x4b6>
							}
							else
							{
								DisplayPrintChar(3, i, '>');
     e18:	4e e3       	ldi	r20, 0x3E	; 62
     e1a:	61 2f       	mov	r22, r17
     e1c:	83 e0       	ldi	r24, 0x03	; 3
     e1e:	0e 94 38 03 	call	0x670	; 0x670 <DisplayPrintChar>
								DisplayPrintChar(3, i+1, alphabet[i]);
     e22:	e7 e2       	ldi	r30, 0x27	; 39
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	ec 0f       	add	r30, r28
     e28:	fd 1f       	adc	r31, r29
     e2a:	e1 0f       	add	r30, r17
     e2c:	f1 1d       	adc	r31, r1
     e2e:	40 81       	ld	r20, Z
     e30:	61 e0       	ldi	r22, 0x01	; 1
     e32:	61 0f       	add	r22, r17
     e34:	83 e0       	ldi	r24, 0x03	; 3
     e36:	0e 94 38 03 	call	0x670	; 0x670 <DisplayPrintChar>
						{
							DisplayPrintChar(2, i + 1, chListGuessed[i]);
						}
						//DisplayPrintLine(1,0, strWord);
						DisplayPrintChar(2,0, scrollIndex + '0');
						for(i = 0; i < 16; i++)
     e3a:	1f 5f       	subi	r17, 0xFF	; 255
     e3c:	10 31       	cpi	r17, 0x10	; 16
     e3e:	70 f2       	brcs	.-100    	; 0xddc <main+0x458>
     e40:	f1 2c       	mov	r15, r1
     e42:	37 c0       	rjmp	.+110    	; 0xeb2 <main+0x52e>
								DisplayPrintChar(3, i+1, alphabet[i]);
							}
						}
						for(i = 0; i < 10; i++)
						{
							if((i + 16) < scrollIndex)
     e44:	0f 2d       	mov	r16, r15
     e46:	10 e0       	ldi	r17, 0x00	; 0
     e48:	00 5f       	subi	r16, 0xF0	; 240
     e4a:	1f 4f       	sbci	r17, 0xFF	; 255
     e4c:	89 81       	ldd	r24, Y+1	; 0x01
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	08 17       	cp	r16, r24
     e52:	19 07       	cpc	r17, r25
     e54:	64 f4       	brge	.+24     	; 0xe6e <main+0x4ea>
							{
								DisplayPrintChar(4, i, alphabet[i + 16]);
     e56:	e7 e2       	ldi	r30, 0x27	; 39
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	ec 0f       	add	r30, r28
     e5c:	fd 1f       	adc	r31, r29
     e5e:	e0 0f       	add	r30, r16
     e60:	f1 1f       	adc	r31, r17
     e62:	40 81       	ld	r20, Z
     e64:	6f 2d       	mov	r22, r15
     e66:	84 e0       	ldi	r24, 0x04	; 4
     e68:	0e 94 38 03 	call	0x670	; 0x670 <DisplayPrintChar>
     e6c:	21 c0       	rjmp	.+66     	; 0xeb0 <main+0x52c>
							}
							else if((i + 16) > scrollIndex)
     e6e:	80 17       	cp	r24, r16
     e70:	91 07       	cpc	r25, r17
     e72:	6c f4       	brge	.+26     	; 0xe8e <main+0x50a>
							{
								DisplayPrintChar(4, i+1, alphabet[i + 16]);
     e74:	e7 e2       	ldi	r30, 0x27	; 39
     e76:	f0 e0       	ldi	r31, 0x00	; 0
     e78:	ec 0f       	add	r30, r28
     e7a:	fd 1f       	adc	r31, r29
     e7c:	e0 0f       	add	r30, r16
     e7e:	f1 1f       	adc	r31, r17
     e80:	40 81       	ld	r20, Z
     e82:	61 e0       	ldi	r22, 0x01	; 1
     e84:	6f 0d       	add	r22, r15
     e86:	84 e0       	ldi	r24, 0x04	; 4
     e88:	0e 94 38 03 	call	0x670	; 0x670 <DisplayPrintChar>
     e8c:	11 c0       	rjmp	.+34     	; 0xeb0 <main+0x52c>
							}
							else
							{
								DisplayPrintChar(4, i, '>');
     e8e:	4e e3       	ldi	r20, 0x3E	; 62
     e90:	6f 2d       	mov	r22, r15
     e92:	84 e0       	ldi	r24, 0x04	; 4
     e94:	0e 94 38 03 	call	0x670	; 0x670 <DisplayPrintChar>
								DisplayPrintChar(4, i+1, alphabet[i + 16]);
     e98:	e7 e2       	ldi	r30, 0x27	; 39
     e9a:	f0 e0       	ldi	r31, 0x00	; 0
     e9c:	ec 0f       	add	r30, r28
     e9e:	fd 1f       	adc	r31, r29
     ea0:	e0 0f       	add	r30, r16
     ea2:	f1 1f       	adc	r31, r17
     ea4:	40 81       	ld	r20, Z
     ea6:	61 e0       	ldi	r22, 0x01	; 1
     ea8:	6f 0d       	add	r22, r15
     eaa:	84 e0       	ldi	r24, 0x04	; 4
     eac:	0e 94 38 03 	call	0x670	; 0x670 <DisplayPrintChar>
							{
								DisplayPrintChar(3, i, '>');
								DisplayPrintChar(3, i+1, alphabet[i]);
							}
						}
						for(i = 0; i < 10; i++)
     eb0:	f3 94       	inc	r15
     eb2:	49 e0       	ldi	r20, 0x09	; 9
     eb4:	4f 15       	cp	r20, r15
     eb6:	30 f6       	brcc	.-116    	; 0xe44 <main+0x4c0>
							{
								DisplayPrintChar(4, i, '>');
								DisplayPrintChar(4, i+1, alphabet[i + 16]);
							}
						}
						DisplayPrintLine(5,0, "   <    ^    v    >");
     eb8:	4e e7       	ldi	r20, 0x7E	; 126
     eba:	51 e0       	ldi	r21, 0x01	; 1
     ebc:	60 e0       	ldi	r22, 0x00	; 0
     ebe:	85 e0       	ldi	r24, 0x05	; 5
     ec0:	0e 94 89 03 	call	0x712	; 0x712 <DisplayPrintLine>
     ec4:	34 c0       	rjmp	.+104    	; 0xf2e <main+0x5aa>
					}
				}
				else
				{
					scrollIndex = 0;
     ec6:	19 82       	std	Y+1, r1	; 0x01
					scrollLength = 0;
     ec8:	1c 82       	std	Y+4, r1	; 0x04
					selection = 0;
     eca:	1b 82       	std	Y+3, r1	; 0x03
					strikes = 0;
					confirmSelect = false;
     ecc:	e7 96       	adiw	r28, 0x37	; 55
     ece:	1f ae       	std	Y+63, r1	; 0x3f
     ed0:	e7 97       	sbiw	r28, 0x37	; 55
					memset(chList, 0, strlen(chList));
     ed2:	ce 01       	movw	r24, r28
     ed4:	8f 5b       	subi	r24, 0xBF	; 191
     ed6:	9f 4f       	sbci	r25, 0xFF	; 255
     ed8:	fc 01       	movw	r30, r24
     eda:	01 90       	ld	r0, Z+
     edc:	00 20       	and	r0, r0
     ede:	e9 f7       	brne	.-6      	; 0xeda <main+0x556>
     ee0:	31 97       	sbiw	r30, 0x01	; 1
     ee2:	af 01       	movw	r20, r30
     ee4:	48 1b       	sub	r20, r24
     ee6:	59 0b       	sbc	r21, r25
     ee8:	60 e0       	ldi	r22, 0x00	; 0
     eea:	70 e0       	ldi	r23, 0x00	; 0
     eec:	0e 94 97 08 	call	0x112e	; 0x112e <memset>
					memset(chListGuessed, 0, strlen(chListGuessed));
     ef0:	ce 01       	movw	r24, r28
     ef2:	85 5a       	subi	r24, 0xA5	; 165
     ef4:	9f 4f       	sbci	r25, 0xFF	; 255
     ef6:	fc 01       	movw	r30, r24
     ef8:	01 90       	ld	r0, Z+
     efa:	00 20       	and	r0, r0
     efc:	e9 f7       	brne	.-6      	; 0xef8 <main+0x574>
     efe:	31 97       	sbiw	r30, 0x01	; 1
     f00:	af 01       	movw	r20, r30
     f02:	48 1b       	sub	r20, r24
     f04:	59 0b       	sbc	r21, r25
     f06:	60 e0       	ldi	r22, 0x00	; 0
     f08:	70 e0       	ldi	r23, 0x00	; 0
     f0a:	0e 94 97 08 	call	0x112e	; 0x112e <memset>
					strStrikes[9] = '_';
     f0e:	8f e5       	ldi	r24, 0x5F	; 95
     f10:	8f 8f       	std	Y+31, r24	; 0x1f
					strStrikes[10] = '_';
     f12:	88 a3       	std	Y+32, r24	; 0x20
					strStrikes[11] = '_';
     f14:	89 a3       	std	Y+33, r24	; 0x21
					strStrikes[12] = '_';
     f16:	8a a3       	std	Y+34, r24	; 0x22
					strStrikes[13] = '_';
     f18:	8b a3       	std	Y+35, r24	; 0x23
					strStrikes[14] = '_';
     f1a:	8c a3       	std	Y+36, r24	; 0x24
					generate = true;
					indexPg = 3;
     f1c:	83 e0       	ldi	r24, 0x03	; 3
     f1e:	8a 83       	std	Y+2, r24	; 0x02
					update = true;
     f20:	81 e0       	ldi	r24, 0x01	; 1
     f22:	e6 96       	adiw	r28, 0x36	; 54
     f24:	8f af       	std	Y+63, r24	; 0x3f
     f26:	e6 97       	sbiw	r28, 0x36	; 54
					strStrikes[10] = '_';
					strStrikes[11] = '_';
					strStrikes[12] = '_';
					strStrikes[13] = '_';
					strStrikes[14] = '_';
					generate = true;
     f28:	cc 24       	eor	r12, r12
     f2a:	c3 94       	inc	r12
				else
				{
					scrollIndex = 0;
					scrollLength = 0;
					selection = 0;
					strikes = 0;
     f2c:	d1 2c       	mov	r13, r1
     f2e:	83 ed       	ldi	r24, 0xD3	; 211
     f30:	90 e3       	ldi	r25, 0x30	; 48
     f32:	01 97       	sbiw	r24, 0x01	; 1
     f34:	f1 f7       	brne	.-4      	; 0xf32 <main+0x5ae>
     f36:	00 c0       	rjmp	.+0      	; 0xf38 <main+0x5b4>
     f38:	00 00       	nop
     f3a:	41 c0       	rjmp	.+130    	; 0xfbe <main+0x63a>
					update = true;
				}
				_delay_ms(50);
				
			}
			else if(selection == 1)
     f3c:	81 30       	cpi	r24, 0x01	; 1
     f3e:	f9 f4       	brne	.+62     	; 0xf7e <main+0x5fa>
			{
				scrollLength = 19;
     f40:	83 e1       	ldi	r24, 0x13	; 19
     f42:	8c 83       	std	Y+4, r24	; 0x04
				char strBuff[30];
				for(i = 0; i < 5; i++)
     f44:	10 e0       	ldi	r17, 0x00	; 0
     f46:	18 c0       	rjmp	.+48     	; 0xf78 <main+0x5f4>
				{
					// Copy a string from PGM to a buffer to use in printline function
					strcpy_P(strBuff, (char*)pgm_read_word(&(TXT_HOWTOPLAY[i + scrollIndex])));
     f48:	89 81       	ldd	r24, Y+1	; 0x01
     f4a:	e1 2f       	mov	r30, r17
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	e8 0f       	add	r30, r24
     f50:	f1 1d       	adc	r31, r1
     f52:	ee 0f       	add	r30, r30
     f54:	ff 1f       	adc	r31, r31
     f56:	e3 54       	subi	r30, 0x43	; 67
     f58:	ff 4f       	sbci	r31, 0xFF	; 255
     f5a:	65 91       	lpm	r22, Z+
     f5c:	74 91       	lpm	r23, Z
     f5e:	ce 01       	movw	r24, r28
     f60:	89 58       	subi	r24, 0x89	; 137
     f62:	9f 4f       	sbci	r25, 0xFF	; 255
     f64:	0e 94 90 08 	call	0x1120	; 0x1120 <strcpy_P>
					DisplayPrintLine(i,0,strBuff);
     f68:	ae 01       	movw	r20, r28
     f6a:	49 58       	subi	r20, 0x89	; 137
     f6c:	5f 4f       	sbci	r21, 0xFF	; 255
     f6e:	60 e0       	ldi	r22, 0x00	; 0
     f70:	81 2f       	mov	r24, r17
     f72:	0e 94 89 03 	call	0x712	; 0x712 <DisplayPrintLine>
			}
			else if(selection == 1)
			{
				scrollLength = 19;
				char strBuff[30];
				for(i = 0; i < 5; i++)
     f76:	1f 5f       	subi	r17, 0xFF	; 255
     f78:	15 30       	cpi	r17, 0x05	; 5
     f7a:	30 f3       	brcs	.-52     	; 0xf48 <main+0x5c4>
     f7c:	20 c0       	rjmp	.+64     	; 0xfbe <main+0x63a>
					// Copy a string from PGM to a buffer to use in printline function
					strcpy_P(strBuff, (char*)pgm_read_word(&(TXT_HOWTOPLAY[i + scrollIndex])));
					DisplayPrintLine(i,0,strBuff);
				}
			}
			else if(selection == 2)
     f7e:	82 30       	cpi	r24, 0x02	; 2
     f80:	f1 f4       	brne	.+60     	; 0xfbe <main+0x63a>
			{
				scrollLength = 6;
     f82:	86 e0       	ldi	r24, 0x06	; 6
     f84:	8c 83       	std	Y+4, r24	; 0x04
				char strBuff[30];
				for(i = 0; i < 5; i++)
     f86:	10 e0       	ldi	r17, 0x00	; 0
     f88:	18 c0       	rjmp	.+48     	; 0xfba <main+0x636>
				{
					// Copy a string from PGM to a buffer to use in printline function
					strcpy_P(strBuff, (char*)pgm_read_word(&(TXT_ABOUT[i + scrollIndex])));
     f8a:	89 81       	ldd	r24, Y+1	; 0x01
     f8c:	e1 2f       	mov	r30, r17
     f8e:	f0 e0       	ldi	r31, 0x00	; 0
     f90:	e8 0f       	add	r30, r24
     f92:	f1 1d       	adc	r31, r1
     f94:	ee 0f       	add	r30, r30
     f96:	ff 1f       	adc	r31, r31
     f98:	e7 5b       	subi	r30, 0xB7	; 183
     f9a:	fd 4f       	sbci	r31, 0xFD	; 253
     f9c:	65 91       	lpm	r22, Z+
     f9e:	74 91       	lpm	r23, Z
     fa0:	ce 01       	movw	r24, r28
     fa2:	89 58       	subi	r24, 0x89	; 137
     fa4:	9f 4f       	sbci	r25, 0xFF	; 255
     fa6:	0e 94 90 08 	call	0x1120	; 0x1120 <strcpy_P>
					DisplayPrintLine(i,0,strBuff);
     faa:	ae 01       	movw	r20, r28
     fac:	49 58       	subi	r20, 0x89	; 137
     fae:	5f 4f       	sbci	r21, 0xFF	; 255
     fb0:	60 e0       	ldi	r22, 0x00	; 0
     fb2:	81 2f       	mov	r24, r17
     fb4:	0e 94 89 03 	call	0x712	; 0x712 <DisplayPrintLine>
			}
			else if(selection == 2)
			{
				scrollLength = 6;
				char strBuff[30];
				for(i = 0; i < 5; i++)
     fb8:	1f 5f       	subi	r17, 0xFF	; 255
     fba:	15 30       	cpi	r17, 0x05	; 5
     fbc:	30 f3       	brcs	.-52     	; 0xf8a <main+0x606>
					// Copy a string from PGM to a buffer to use in printline function
					strcpy_P(strBuff, (char*)pgm_read_word(&(TXT_ABOUT[i + scrollIndex])));
					DisplayPrintLine(i,0,strBuff);
				}
			}
			DisplayPrintLine(5,0, "   <    ^    v    >");
     fbe:	4e e7       	ldi	r20, 0x7E	; 126
     fc0:	51 e0       	ldi	r21, 0x01	; 1
     fc2:	60 e0       	ldi	r22, 0x00	; 0
     fc4:	85 e0       	ldi	r24, 0x05	; 5
     fc6:	0e 94 89 03 	call	0x712	; 0x712 <DisplayPrintLine>
     fca:	18 cd       	rjmp	.-1488   	; 0x9fc <main+0x78>
		}
		else if(update && indexPg == 2)
     fcc:	88 23       	and	r24, r24
     fce:	81 f0       	breq	.+32     	; 0xff0 <main+0x66c>
     fd0:	9a 81       	ldd	r25, Y+2	; 0x02
     fd2:	92 30       	cpi	r25, 0x02	; 2
     fd4:	69 f4       	brne	.+26     	; 0xff0 <main+0x66c>
		{
			DisplayPrintLine(1,5, "You Won!");
     fd6:	42 e9       	ldi	r20, 0x92	; 146
     fd8:	51 e0       	ldi	r21, 0x01	; 1
     fda:	65 e0       	ldi	r22, 0x05	; 5
     fdc:	81 e0       	ldi	r24, 0x01	; 1
     fde:	0e 94 89 03 	call	0x712	; 0x712 <DisplayPrintLine>
			DisplayPrintLine(5,0, "   <");
     fe2:	4b e9       	ldi	r20, 0x9B	; 155
     fe4:	51 e0       	ldi	r21, 0x01	; 1
     fe6:	60 e0       	ldi	r22, 0x00	; 0
     fe8:	85 e0       	ldi	r24, 0x05	; 5
     fea:	0e 94 89 03 	call	0x712	; 0x712 <DisplayPrintLine>
     fee:	06 cd       	rjmp	.-1524   	; 0x9fc <main+0x78>
		}
		else if(update && indexPg == 3)
     ff0:	88 23       	and	r24, r24
     ff2:	09 f4       	brne	.+2      	; 0xff6 <main+0x672>
     ff4:	03 cd       	rjmp	.-1530   	; 0x9fc <main+0x78>
     ff6:	8a 81       	ldd	r24, Y+2	; 0x02
     ff8:	83 30       	cpi	r24, 0x03	; 3
     ffa:	09 f0       	breq	.+2      	; 0xffe <main+0x67a>
     ffc:	ff cc       	rjmp	.-1538   	; 0x9fc <main+0x78>
		{
			DisplayPrintLine(1,4, "You Lost!");
     ffe:	40 ea       	ldi	r20, 0xA0	; 160
    1000:	51 e0       	ldi	r21, 0x01	; 1
    1002:	64 e0       	ldi	r22, 0x04	; 4
    1004:	81 e0       	ldi	r24, 0x01	; 1
    1006:	0e 94 89 03 	call	0x712	; 0x712 <DisplayPrintLine>
			DisplayPrintLine(5,0, "   <");
    100a:	4b e9       	ldi	r20, 0x9B	; 155
    100c:	51 e0       	ldi	r21, 0x01	; 1
    100e:	60 e0       	ldi	r22, 0x00	; 0
    1010:	85 e0       	ldi	r24, 0x05	; 5
    1012:	0e 94 89 03 	call	0x712	; 0x712 <DisplayPrintLine>
    1016:	f2 cc       	rjmp	.-1564   	; 0x9fc <main+0x78>

00001018 <__divmodhi4>:
    1018:	97 fb       	bst	r25, 7
    101a:	07 2e       	mov	r0, r23
    101c:	16 f4       	brtc	.+4      	; 0x1022 <__divmodhi4+0xa>
    101e:	00 94       	com	r0
    1020:	07 d0       	rcall	.+14     	; 0x1030 <__divmodhi4_neg1>
    1022:	77 fd       	sbrc	r23, 7
    1024:	09 d0       	rcall	.+18     	; 0x1038 <__divmodhi4_neg2>
    1026:	0e 94 20 08 	call	0x1040	; 0x1040 <__udivmodhi4>
    102a:	07 fc       	sbrc	r0, 7
    102c:	05 d0       	rcall	.+10     	; 0x1038 <__divmodhi4_neg2>
    102e:	3e f4       	brtc	.+14     	; 0x103e <__divmodhi4_exit>

00001030 <__divmodhi4_neg1>:
    1030:	90 95       	com	r25
    1032:	81 95       	neg	r24
    1034:	9f 4f       	sbci	r25, 0xFF	; 255
    1036:	08 95       	ret

00001038 <__divmodhi4_neg2>:
    1038:	70 95       	com	r23
    103a:	61 95       	neg	r22
    103c:	7f 4f       	sbci	r23, 0xFF	; 255

0000103e <__divmodhi4_exit>:
    103e:	08 95       	ret

00001040 <__udivmodhi4>:
    1040:	aa 1b       	sub	r26, r26
    1042:	bb 1b       	sub	r27, r27
    1044:	51 e1       	ldi	r21, 0x11	; 17
    1046:	07 c0       	rjmp	.+14     	; 0x1056 <__udivmodhi4_ep>

00001048 <__udivmodhi4_loop>:
    1048:	aa 1f       	adc	r26, r26
    104a:	bb 1f       	adc	r27, r27
    104c:	a6 17       	cp	r26, r22
    104e:	b7 07       	cpc	r27, r23
    1050:	10 f0       	brcs	.+4      	; 0x1056 <__udivmodhi4_ep>
    1052:	a6 1b       	sub	r26, r22
    1054:	b7 0b       	sbc	r27, r23

00001056 <__udivmodhi4_ep>:
    1056:	88 1f       	adc	r24, r24
    1058:	99 1f       	adc	r25, r25
    105a:	5a 95       	dec	r21
    105c:	a9 f7       	brne	.-22     	; 0x1048 <__udivmodhi4_loop>
    105e:	80 95       	com	r24
    1060:	90 95       	com	r25
    1062:	bc 01       	movw	r22, r24
    1064:	cd 01       	movw	r24, r26
    1066:	08 95       	ret

00001068 <do_rand>:
    1068:	8f 92       	push	r8
    106a:	9f 92       	push	r9
    106c:	af 92       	push	r10
    106e:	bf 92       	push	r11
    1070:	cf 92       	push	r12
    1072:	df 92       	push	r13
    1074:	ef 92       	push	r14
    1076:	ff 92       	push	r15
    1078:	cf 93       	push	r28
    107a:	df 93       	push	r29
    107c:	ec 01       	movw	r28, r24
    107e:	68 81       	ld	r22, Y
    1080:	79 81       	ldd	r23, Y+1	; 0x01
    1082:	8a 81       	ldd	r24, Y+2	; 0x02
    1084:	9b 81       	ldd	r25, Y+3	; 0x03
    1086:	61 15       	cp	r22, r1
    1088:	71 05       	cpc	r23, r1
    108a:	81 05       	cpc	r24, r1
    108c:	91 05       	cpc	r25, r1
    108e:	21 f4       	brne	.+8      	; 0x1098 <do_rand+0x30>
    1090:	64 e2       	ldi	r22, 0x24	; 36
    1092:	79 ed       	ldi	r23, 0xD9	; 217
    1094:	8b e5       	ldi	r24, 0x5B	; 91
    1096:	97 e0       	ldi	r25, 0x07	; 7
    1098:	2d e1       	ldi	r18, 0x1D	; 29
    109a:	33 ef       	ldi	r19, 0xF3	; 243
    109c:	41 e0       	ldi	r20, 0x01	; 1
    109e:	50 e0       	ldi	r21, 0x00	; 0
    10a0:	0e 94 9e 08 	call	0x113c	; 0x113c <__divmodsi4>
    10a4:	49 01       	movw	r8, r18
    10a6:	5a 01       	movw	r10, r20
    10a8:	9b 01       	movw	r18, r22
    10aa:	ac 01       	movw	r20, r24
    10ac:	a7 ea       	ldi	r26, 0xA7	; 167
    10ae:	b1 e4       	ldi	r27, 0x41	; 65
    10b0:	0e 94 bd 08 	call	0x117a	; 0x117a <__muluhisi3>
    10b4:	6b 01       	movw	r12, r22
    10b6:	7c 01       	movw	r14, r24
    10b8:	ac ee       	ldi	r26, 0xEC	; 236
    10ba:	b4 ef       	ldi	r27, 0xF4	; 244
    10bc:	a5 01       	movw	r20, r10
    10be:	94 01       	movw	r18, r8
    10c0:	0e 94 cb 08 	call	0x1196	; 0x1196 <__mulohisi3>
    10c4:	dc 01       	movw	r26, r24
    10c6:	cb 01       	movw	r24, r22
    10c8:	8c 0d       	add	r24, r12
    10ca:	9d 1d       	adc	r25, r13
    10cc:	ae 1d       	adc	r26, r14
    10ce:	bf 1d       	adc	r27, r15
    10d0:	b7 ff       	sbrs	r27, 7
    10d2:	03 c0       	rjmp	.+6      	; 0x10da <do_rand+0x72>
    10d4:	01 97       	sbiw	r24, 0x01	; 1
    10d6:	a1 09       	sbc	r26, r1
    10d8:	b0 48       	sbci	r27, 0x80	; 128
    10da:	88 83       	st	Y, r24
    10dc:	99 83       	std	Y+1, r25	; 0x01
    10de:	aa 83       	std	Y+2, r26	; 0x02
    10e0:	bb 83       	std	Y+3, r27	; 0x03
    10e2:	9f 77       	andi	r25, 0x7F	; 127
    10e4:	df 91       	pop	r29
    10e6:	cf 91       	pop	r28
    10e8:	ff 90       	pop	r15
    10ea:	ef 90       	pop	r14
    10ec:	df 90       	pop	r13
    10ee:	cf 90       	pop	r12
    10f0:	bf 90       	pop	r11
    10f2:	af 90       	pop	r10
    10f4:	9f 90       	pop	r9
    10f6:	8f 90       	pop	r8
    10f8:	08 95       	ret

000010fa <rand_r>:
    10fa:	0e 94 34 08 	call	0x1068	; 0x1068 <do_rand>
    10fe:	08 95       	ret

00001100 <rand>:
    1100:	80 e0       	ldi	r24, 0x00	; 0
    1102:	91 e0       	ldi	r25, 0x01	; 1
    1104:	0e 94 34 08 	call	0x1068	; 0x1068 <do_rand>
    1108:	08 95       	ret

0000110a <srand>:
    110a:	a0 e0       	ldi	r26, 0x00	; 0
    110c:	b0 e0       	ldi	r27, 0x00	; 0
    110e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    1112:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1116:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
    111a:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
    111e:	08 95       	ret

00001120 <strcpy_P>:
    1120:	fb 01       	movw	r30, r22
    1122:	dc 01       	movw	r26, r24
    1124:	05 90       	lpm	r0, Z+
    1126:	0d 92       	st	X+, r0
    1128:	00 20       	and	r0, r0
    112a:	e1 f7       	brne	.-8      	; 0x1124 <strcpy_P+0x4>
    112c:	08 95       	ret

0000112e <memset>:
    112e:	dc 01       	movw	r26, r24
    1130:	01 c0       	rjmp	.+2      	; 0x1134 <memset+0x6>
    1132:	6d 93       	st	X+, r22
    1134:	41 50       	subi	r20, 0x01	; 1
    1136:	50 40       	sbci	r21, 0x00	; 0
    1138:	e0 f7       	brcc	.-8      	; 0x1132 <memset+0x4>
    113a:	08 95       	ret

0000113c <__divmodsi4>:
    113c:	05 2e       	mov	r0, r21
    113e:	97 fb       	bst	r25, 7
    1140:	1e f4       	brtc	.+6      	; 0x1148 <__divmodsi4+0xc>
    1142:	00 94       	com	r0
    1144:	0e 94 b5 08 	call	0x116a	; 0x116a <__negsi2>
    1148:	57 fd       	sbrc	r21, 7
    114a:	07 d0       	rcall	.+14     	; 0x115a <__divmodsi4_neg2>
    114c:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <__udivmodsi4>
    1150:	07 fc       	sbrc	r0, 7
    1152:	03 d0       	rcall	.+6      	; 0x115a <__divmodsi4_neg2>
    1154:	4e f4       	brtc	.+18     	; 0x1168 <__divmodsi4_exit>
    1156:	0c 94 b5 08 	jmp	0x116a	; 0x116a <__negsi2>

0000115a <__divmodsi4_neg2>:
    115a:	50 95       	com	r21
    115c:	40 95       	com	r20
    115e:	30 95       	com	r19
    1160:	21 95       	neg	r18
    1162:	3f 4f       	sbci	r19, 0xFF	; 255
    1164:	4f 4f       	sbci	r20, 0xFF	; 255
    1166:	5f 4f       	sbci	r21, 0xFF	; 255

00001168 <__divmodsi4_exit>:
    1168:	08 95       	ret

0000116a <__negsi2>:
    116a:	90 95       	com	r25
    116c:	80 95       	com	r24
    116e:	70 95       	com	r23
    1170:	61 95       	neg	r22
    1172:	7f 4f       	sbci	r23, 0xFF	; 255
    1174:	8f 4f       	sbci	r24, 0xFF	; 255
    1176:	9f 4f       	sbci	r25, 0xFF	; 255
    1178:	08 95       	ret

0000117a <__muluhisi3>:
    117a:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <__umulhisi3>
    117e:	a5 9f       	mul	r26, r21
    1180:	90 0d       	add	r25, r0
    1182:	b4 9f       	mul	r27, r20
    1184:	90 0d       	add	r25, r0
    1186:	a4 9f       	mul	r26, r20
    1188:	80 0d       	add	r24, r0
    118a:	91 1d       	adc	r25, r1
    118c:	11 24       	eor	r1, r1
    118e:	08 95       	ret

00001190 <__mulshisi3>:
    1190:	b7 ff       	sbrs	r27, 7
    1192:	0c 94 bd 08 	jmp	0x117a	; 0x117a <__muluhisi3>

00001196 <__mulohisi3>:
    1196:	0e 94 bd 08 	call	0x117a	; 0x117a <__muluhisi3>
    119a:	82 1b       	sub	r24, r18
    119c:	93 0b       	sbc	r25, r19
    119e:	08 95       	ret

000011a0 <__udivmodsi4>:
    11a0:	a1 e2       	ldi	r26, 0x21	; 33
    11a2:	1a 2e       	mov	r1, r26
    11a4:	aa 1b       	sub	r26, r26
    11a6:	bb 1b       	sub	r27, r27
    11a8:	fd 01       	movw	r30, r26
    11aa:	0d c0       	rjmp	.+26     	; 0x11c6 <__udivmodsi4_ep>

000011ac <__udivmodsi4_loop>:
    11ac:	aa 1f       	adc	r26, r26
    11ae:	bb 1f       	adc	r27, r27
    11b0:	ee 1f       	adc	r30, r30
    11b2:	ff 1f       	adc	r31, r31
    11b4:	a2 17       	cp	r26, r18
    11b6:	b3 07       	cpc	r27, r19
    11b8:	e4 07       	cpc	r30, r20
    11ba:	f5 07       	cpc	r31, r21
    11bc:	20 f0       	brcs	.+8      	; 0x11c6 <__udivmodsi4_ep>
    11be:	a2 1b       	sub	r26, r18
    11c0:	b3 0b       	sbc	r27, r19
    11c2:	e4 0b       	sbc	r30, r20
    11c4:	f5 0b       	sbc	r31, r21

000011c6 <__udivmodsi4_ep>:
    11c6:	66 1f       	adc	r22, r22
    11c8:	77 1f       	adc	r23, r23
    11ca:	88 1f       	adc	r24, r24
    11cc:	99 1f       	adc	r25, r25
    11ce:	1a 94       	dec	r1
    11d0:	69 f7       	brne	.-38     	; 0x11ac <__udivmodsi4_loop>
    11d2:	60 95       	com	r22
    11d4:	70 95       	com	r23
    11d6:	80 95       	com	r24
    11d8:	90 95       	com	r25
    11da:	9b 01       	movw	r18, r22
    11dc:	ac 01       	movw	r20, r24
    11de:	bd 01       	movw	r22, r26
    11e0:	cf 01       	movw	r24, r30
    11e2:	08 95       	ret

000011e4 <__umulhisi3>:
    11e4:	a2 9f       	mul	r26, r18
    11e6:	b0 01       	movw	r22, r0
    11e8:	b3 9f       	mul	r27, r19
    11ea:	c0 01       	movw	r24, r0
    11ec:	a3 9f       	mul	r26, r19
    11ee:	70 0d       	add	r23, r0
    11f0:	81 1d       	adc	r24, r1
    11f2:	11 24       	eor	r1, r1
    11f4:	91 1d       	adc	r25, r1
    11f6:	b2 9f       	mul	r27, r18
    11f8:	70 0d       	add	r23, r0
    11fa:	81 1d       	adc	r24, r1
    11fc:	11 24       	eor	r1, r1
    11fe:	91 1d       	adc	r25, r1
    1200:	08 95       	ret

00001202 <_exit>:
    1202:	f8 94       	cli

00001204 <__stop_program>:
    1204:	ff cf       	rjmp	.-2      	; 0x1204 <__stop_program>
